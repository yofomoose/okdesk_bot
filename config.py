import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Telegram Bot Configuration
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Okdesk API Configuration
OKDESK_API_URL = os.getenv("OKDESK_API_URL")
OKDESK_API_TOKEN = os.getenv("OKDESK_API_TOKEN")
OKDESK_PORTAL_URL = os.getenv("OKDESK_PORTAL_URL", "https://yapomogu55.okdesk.ru")
OKDESK_PORTAL_TOKEN = os.getenv("OKDESK_PORTAL_TOKEN")
OKDESK_SYSTEM_USER_ID_STR = os.getenv("OKDESK_SYSTEM_USER_ID", "5")
OKDESK_SYSTEM_USER_ID = int(OKDESK_SYSTEM_USER_ID_STR) if OKDESK_SYSTEM_USER_ID_STR and OKDESK_SYSTEM_USER_ID_STR.isdigit() else None

# Webhook Configuration
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/okdesk-webhook")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

# Database Configuration
# PostgreSQL Configuration
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "postgres")
POSTGRES_PORT = os.getenv("POSTGRES_PORT", "5432")
POSTGRES_DB = os.getenv("POSTGRES_DB", "okdesk_bot")
POSTGRES_USER = os.getenv("POSTGRES_USER", "okdesk_user")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "changeme123")

# Default PostgreSQL URL
DEFAULT_POSTGRES_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"

# Fallback to SQLite for local development
if os.path.exists("/app/data"):
    # Docker with SQLite fallback
    DEFAULT_DB_PATH = "sqlite:////app/data/okdesk_bot.db"
else:
    # Local SQLite
    DEFAULT_DB_PATH = "sqlite:///data/okdesk_bot.db"

# Use PostgreSQL if POSTGRES_HOST is set and not 'sqlite', otherwise use SQLite
if POSTGRES_HOST and POSTGRES_HOST.lower() != 'sqlite':
    DATABASE_URL = os.getenv("DATABASE_URL", DEFAULT_POSTGRES_URL)
else:
    DATABASE_URL = os.getenv("DATABASE_URL", DEFAULT_DB_PATH)

# Server Configuration
HOST = os.getenv("HOST", "0.0.0.0")  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
PORT = int(os.getenv("PORT", 8000))

# Okdesk API Endpoints
OKDESK_ENDPOINTS = {
    "companies": "/companies",
    "issues": "/issues",
    "comments": "/issues/{issue_id}/comments",
    "equipments": "/equipments"
}

# User Types
USER_TYPES = {
    "individual": "physical",
    "company": "legal"
}

# Issue Status Messages
ISSUE_STATUS_MESSAGES = {
    "opened": "üü° –ó–∞—è–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞",
    "in_progress": "üîµ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ", 
    "on_hold": "‚è∏Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
    "resolved": "‚úÖ –ó–∞—è–≤–∫–∞ —Ä–µ—à–µ–Ω–∞",
    "closed": "üîí –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞",
    "completed": "‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
    "done": "‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
    "finished": "‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
    "solved": "‚úÖ –ó–∞—è–≤–∫–∞ —Ä–µ—à–µ–Ω–∞"
}

# –°—Ç–∞—Ç—É—Å—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É
RATING_REQUEST_STATUSES = [
    "resolved", "closed", "completed", "done", "finished", "solved",
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ API Okdesk
    "solved", "complete", "finish", "close"
]

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Okdesk (code -> display name)
OKDESK_STATUS_MAPPING = {
    "opened": "opened",
    "in_work": "in_progress", 
    "waiting": "on_hold",
    "resolved": "resolved",
    "closed": "closed",
    "completed": "completed",
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤
    "new": "opened",
    "pending": "on_hold",
    "done": "completed",
    "finished": "completed",
    "solved": "resolved"
}

# –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏
RATING_REQUEST_TEXT = """
‚≠ê –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
"""
