# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Okdesk Bot –ø—Ä–æ–µ–∫—Ç–æ–º
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make <–∫–æ–º–∞–Ω–¥–∞>

.PHONY: help update deploy test logs status clean restart backup restore

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = docker-compose.traefik.yml
PROJECT_NAME = okdesk_bot
BACKUP_DIR = ./backups
LOG_LINES = 100

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED = \033[31m
GREEN = \033[32m
YELLOW = \033[33m
BLUE = \033[34m
BOLD = \033[1m
RESET = \033[0m

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(BOLD)$(BLUE)ü§ñ Okdesk Bot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º$(RESET)"
	@echo ""
	@echo "$(BOLD)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(BOLD)PostgreSQL –∫–æ–º–∞–Ω–¥—ã:$(RESET)"
	@grep -E '^(db-|backup|restore):.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(BLUE)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:$(RESET)"
	@echo "  make update        # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
	@echo "  make logs          # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
	@echo "  make db-status     # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å PostgreSQL"
	@echo "  make backup        # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î"
	@echo "  make test          # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"

update: ## –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (git pull + rebuild + restart)
	@echo "$(BOLD)$(BLUE)üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...$(RESET)"
	@echo "$(YELLOW)üì• –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Git...$(RESET)"
	git pull origin master
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(YELLOW)üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!$(RESET)"
	@make status

deploy: ## –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
	@echo "$(BOLD)$(BLUE)üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) down
	docker-compose -f $(COMPOSE_FILE) up -d
	@make status

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BOLD)$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) restart
	@make status

status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BOLD)$(BLUE)üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞$(RESET)"
	@echo ""
	@echo "$(BOLD)üê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(RESET)"
	docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BOLD)üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:$(RESET)"
	@docker system df
	@echo ""
	@echo "$(BOLD)üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook:$(RESET)"
	@curl -s -X GET https://yapomogu55.okdesk.ru:3000/health || echo "$(RED)‚ùå Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"
	@echo ""
	@echo "$(BOLD)üì± Telegram Bot API:$(RESET)"
	@curl -s "https://api.telegram.org/bot$$(grep BOT_TOKEN .env | cut -d'=' -f2)/getMe" | jq -r '.result.username' 2>/dev/null || echo "$(RED)‚ùå Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BOLD)$(BLUE)üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $(LOG_LINES) —Å—Ç—Ä–æ–∫)$(RESET)"
	docker-compose -f $(COMPOSE_FILE) logs --tail=$(LOG_LINES)

logs-live: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(BOLD)$(BLUE)üìã –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)$(RESET)"
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-bot: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –±–æ—Ç–∞
	@echo "$(BOLD)$(BLUE)ü§ñ –õ–æ–≥–∏ Telegram –±–æ—Ç–∞$(RESET)"
	docker logs $(PROJECT_NAME)_okdesk_bot_1 --tail=$(LOG_LINES)

logs-webhook: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞
	@echo "$(BOLD)$(BLUE)üåê –õ–æ–≥–∏ Webhook —Å–µ—Ä–≤–µ—Ä–∞$(RESET)"
	docker logs $(PROJECT_NAME)_okdesk_webhook_1 --tail=$(LOG_LINES)

logs-errors: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
	@echo "$(BOLD)$(RED)üö® –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö$(RESET)"
	docker-compose -f $(COMPOSE_FILE) logs | grep -i error || echo "$(GREEN)‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ$(RESET)"

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
	@echo "$(BOLD)$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...$(RESET)"
	@echo ""
	@echo "$(BOLD)1. üåê –¢–µ—Å—Ç webhook:$(RESET)"
	@curl -X POST https://yapomogu55.okdesk.ru:3000/okdesk-webhook \
		-H "Content-Type: application/json" \
		-d '{"test": "connection", "timestamp": "'$$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
		-w "\nStatus: %{http_code}\n" || echo "$(RED)‚ùå Webhook —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω$(RESET)"
	@echo ""
	@echo "$(BOLD)2. üóÑÔ∏è –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:$(RESET)"
	@docker exec $(PROJECT_NAME)_postgres_1 psql -U okdesk_user -d okdesk_bot -c "SELECT COUNT(*) as users_count FROM users;" 2>/dev/null || echo "$(RED)‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞$(RESET)"
	@echo ""
	@echo "$(BOLD)3. üîó –¢–µ—Å—Ç Okdesk API:$(RESET)"
	@curl -s "https://yapomogu55.okdesk.ru/api/v1/issues?limit=1&api_token=$$(grep OKDESK_API_TOKEN .env | cut -d'=' -f2)" \
		| jq -r 'if type == "array" then "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç" else "‚ùå API –æ—à–∏–±–∫–∞" end' 2>/dev/null || echo "$(RED)‚ùå Okdesk API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"

test-comment: ## –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
	@echo "$(BOLD)$(BLUE)üí¨ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...$(RESET)"
	@issue_id=$$(curl -s "https://yapomogu55.okdesk.ru/api/v1/issues?limit=1&api_token=$$(grep OKDESK_API_TOKEN .env | cut -d'=' -f2)" | jq -r '.[0].id' 2>/dev/null); \
	if [ "$$issue_id" != "null" ] && [ "$$issue_id" != "" ]; then \
		curl -X POST "https://yapomogu55.okdesk.ru/api/v1/issues/$$issue_id/comments?api_token=$$(grep OKDESK_API_TOKEN .env | cut -d'=' -f2)" \
			-H "Content-Type: application/json" \
			-d '{"content": "**–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**\n\n–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ Makefile", "public": true, "author_id": 1}' \
			-w "\nStatus: %{http_code}\n"; \
	else \
		echo "$(RED)‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è$(RESET)"; \
	fi

backup: ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
	@echo "$(BOLD)$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ PostgreSQL...$(RESET)"
	@mkdir -p $(BACKUP_DIR)
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	docker exec $(PROJECT_NAME)_postgres_1 pg_dump -U okdesk_user -d okdesk_bot > $(BACKUP_DIR)/okdesk_bot_$$timestamp.sql && \
	echo "$(GREEN)‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $(BACKUP_DIR)/okdesk_bot_$$timestamp.sql$(RESET)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "$(BOLD)$(YELLOW)‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL$(RESET)"
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:"
	@ls -la $(BACKUP_DIR)/*.sql 2>/dev/null || echo "$(RED)‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(RESET)"
	@echo ""
	@echo "$(YELLOW)–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:$(RESET)"
	@echo "cat $(BACKUP_DIR)/<—Ñ–∞–π–ª_–∫–æ–ø–∏–∏.sql> | docker exec -i $(PROJECT_NAME)_postgres_1 psql -U okdesk_user -d okdesk_bot"
	@echo "make restart"

clean: ## –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ —Ç–æ–º–æ–≤)
	@echo "$(BOLD)$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã...$(RESET)"
	docker system prune -f
	docker volume prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(BOLD)$(YELLOW)üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) down --remove-orphans

start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(BOLD)$(GREEN)üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) up -d

db-users: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BOLD)$(BLUE)üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:$(RESET)"
	@docker exec $(PROJECT_NAME)_okdesk_bot_1 sqlite3 /app/data/okdesk_bot.db \
		"SELECT telegram_id, username, full_name, phone, is_registered, created_at FROM users ORDER BY created_at DESC;" \
		2>/dev/null || echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö$(RESET)"

db-issues: ## –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BOLD)$(BLUE)üìã –ó–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:$(RESET)"
	@docker exec $(PROJECT_NAME)_okdesk_bot_1 sqlite3 /app/data/okdesk_bot.db \
		"SELECT okdesk_issue_id, title, status, created_at FROM issues ORDER BY created_at DESC LIMIT 10;" \
		2>/dev/null || echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö$(RESET)"

db-comments: ## –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BOLD)$(BLUE)üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:$(RESET)"
	@docker exec $(PROJECT_NAME)_okdesk_bot_1 sqlite3 /app/data/okdesk_bot.db \
		"SELECT issue_id, content, is_from_okdesk, created_at FROM comments ORDER BY created_at DESC LIMIT 10;" \
		2>/dev/null || echo "$(RED)‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö$(RESET)"

monitor: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(BOLD)$(BLUE)üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫, Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)$(RESET)"
	@while true; do \
		clear; \
		echo "$(BOLD)$(BLUE)ü§ñ Okdesk Bot - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ $(RESET) $$(date)"; \
		echo ""; \
		echo "$(BOLD)üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:$(RESET)"; \
		docker-compose -f $(COMPOSE_FILE) ps; \
		echo ""; \
		echo "$(BOLD)üìà –†–µ—Å—É—Ä—Å—ã:$(RESET)"; \
		docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"; \
		echo ""; \
		echo "$(BOLD)üåê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ webhook:$(RESET)"; \
		docker logs $(PROJECT_NAME)_okdesk_webhook_1 --tail=3 2>/dev/null | grep -E "(INFO|POST|GET)" || echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"; \
		sleep 5; \
	done

git-commit: ## –ö–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git
	@echo "$(BOLD)$(BLUE)üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git...$(RESET)"
	git add .
	@read -p "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: " commit_msg; \
	git commit -m "$$commit_msg" && \
	git push origin master && \
	echo "$(GREEN)‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Git$(RESET)"

full-cycle: ## –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (git commit + push + deploy)
	@echo "$(BOLD)$(BLUE)üîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...$(RESET)"
	@make git-commit
	@make update
	@make test
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω!$(RESET)"

# Docker –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
build-fast: ## –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	@echo "$(BOLD)$(BLUE)‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) build

build-no-cache: ## –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –±–µ–∑ –∫—ç—à–∞
	@echo "$(BOLD)$(BLUE)üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –±–µ–∑ –∫—ç—à–∞...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache

build-parallel: ## –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
	@echo "$(BOLD)$(BLUE)üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞...$(RESET)"
	DOCKER_BUILDKIT=1 docker-compose -f $(COMPOSE_FILE) build --parallel

rebuild-bot: ## –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
	@echo "$(BOLD)$(BLUE)ü§ñ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache bot

rebuild-webhook: ## –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ webhook
	@echo "$(BOLD)$(BLUE)üåê –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ webhook...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache webhook

clean-images: ## –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
	@echo "$(BOLD)$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤...$(RESET)"
	docker image prune -f

clean-build-cache: ## –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏
	@echo "$(BOLD)$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏...$(RESET)"
	docker builder prune -f

optimize: ## –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker
	@echo "$(BOLD)$(BLUE)üîß –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker...$(RESET)"
	@echo "$(YELLOW)–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(RESET)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(YELLOW)–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...$(RESET)"
	docker system prune -f
	@echo "$(YELLOW)–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏...$(RESET)"
	docker builder prune -f
	@echo "$(GREEN)‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(RESET)"

# PostgreSQL –∫–æ–º–∞–Ω–¥—ã
db-connect: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BOLD)$(BLUE)üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...$(RESET)"
	docker exec -it $(PROJECT_NAME)_postgres_1 psql -U okdesk_user -d okdesk_bot

db-shell: ## –û—Ç–∫—Ä—ã—Ç—å PostgreSQL shell
	@echo "$(BOLD)$(BLUE)üêö PostgreSQL Shell...$(RESET)"
	docker exec -it $(PROJECT_NAME)_postgres_1 bash -c "psql -U okdesk_user -d okdesk_bot"

db-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ PostgreSQL
	@echo "$(BOLD)$(BLUE)üìã –õ–æ–≥–∏ PostgreSQL$(RESET)"
	docker logs $(PROJECT_NAME)_postgres_1 --tail=$(LOG_LINES)

db-status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å PostgreSQL
	@echo "$(BOLD)$(BLUE)üìä –°—Ç–∞—Ç—É—Å PostgreSQL$(RESET)"
	@docker exec $(PROJECT_NAME)_postgres_1 pg_isready -U okdesk_user -d okdesk_bot && echo "$(GREEN)‚úÖ PostgreSQL –≥–æ—Ç–æ–≤$(RESET)" || echo "$(RED)‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"

db-migrate: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ SQLite –≤ PostgreSQL
	@echo "$(BOLD)$(BLUE)üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL...$(RESET)"
	@echo "$(YELLOW)–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª okdesk_bot.db –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞$(RESET)"
	@docker run --rm -v $$(pwd):/app -w /app --network $(PROJECT_NAME)_default \
		python:3.11-slim bash -c "pip install -r requirements.txt && python migrate_to_postgres.py"

db-reset: ## –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "$(BOLD)$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!$(RESET)"
	@echo "$(YELLOW)–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make db-reset-confirm$(RESET)"

db-reset-confirm: ## –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
	@echo "$(BOLD)$(RED)üóëÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL...$(RESET)"
	docker exec $(PROJECT_NAME)_postgres_1 psql -U okdesk_user -d okdesk_bot -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public; GRANT ALL ON SCHEMA public TO okdesk_user;"
	@echo "$(YELLOW)–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü$(RESET)"

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
all: help
