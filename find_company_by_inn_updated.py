# -*- coding: utf-8 -*-

"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù —á–µ—Ä–µ–∑ API OkDesk.

1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –º–µ—Ç–æ–¥
2. –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ find_company_by_inn –≤ —Ñ–∞–π–ª–µ services/okdesk_api.py
"""

async def find_company_by_inn(self, inn: str, create_if_not_found: bool = False) -> Optional[Dict]:
    """
    –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        inn: –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        create_if_not_found: –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    try:
        if not inn or not inn.strip():
            logger.warning("‚ùå –ò–ù–ù –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
            return None
        
        # –û—á–∏—â–∞–µ–º –ò–ù–ù –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_inn = ''.join(c for c in inn if c.isdigit())
        
        if not clean_inn:
            logger.warning(f"‚ùå –ò–ù–ù '{inn}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
            return None
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù: {clean_inn}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù
        logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ API –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É inn_company={clean_inn}...")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ inn_company –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π API
        companies = await self._make_request('GET', f"/companies/list?parameter[inn_company]={clean_inn}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if isinstance(companies, list) and companies:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É inn_company={clean_inn}")
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –ò–ù–ù –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
            company = companies[0]
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
        else:
            logger.info(f"‚ùå –ö–æ–º–ø–∞–Ω–∏–∏ —Å inn_company={clean_inn} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API-–∑–∞–ø—Ä–æ—Å")
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
            logger.info("üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π...")
            
            companies = await self.get_companies(limit=1000)
            
            if isinstance(companies, list):
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                
                for comp in companies:
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é ID: {comp.get('id')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {comp.get('name')}")
                    
                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö
                    inn_values = [
                        str(comp.get('inn', '')).strip(),
                        str(comp.get('inn_company', '')).strip(),
                        str(comp.get('legal_inn', '')).strip()
                    ]
                    
                    if clean_inn in inn_values:
                        company = comp
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—é –ò–ù–ù: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                        break
                    
                    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                    if 'parameters' in comp:
                        found_in_params = False
                        for param in comp.get('parameters', []):
                            if param.get('code') in ['inn', 'INN', '–ò–ù–ù', 'inn_company', '0001'] and str(param.get('value', '')).strip() == clean_inn:
                                company = comp
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É {param.get('code')}: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                                found_in_params = True
                                break
                        
                        if found_in_params:
                            break
                    
                    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ custom_parameters, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if 'custom_parameters' in comp:
                        custom_params = comp.get('custom_parameters', {})
                        inn_fields = ['inn', 'INN', '–ò–ù–ù', 'inn_company']
                        
                        for field in inn_fields:
                            if field in custom_params and str(custom_params[field]).strip() == clean_inn:
                                company = comp
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ custom_parameters.{field}: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                                break
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é, –æ–±–Ω–æ–≤–∏–º —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if company:
            logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è, –æ–±–Ω–æ–≤–∏–º –µ—ë ID –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –ò–ù–ù
            try:
                from services.database import DatabaseManager
                db = DatabaseManager('okdesk_bot.db')
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –ò–ù–ù, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∑–∞–¥–∞–Ω okdesk_company_id
                users = db.execute(
                    "SELECT telegram_id FROM users WHERE inn_company = ? AND okdesk_company_id IS NULL", 
                    (clean_inn,)
                ).fetchall()
                
                for user_row in users:
                    user_id = user_row[0]
                    # –û–±–Ω–æ–≤–ª—è–µ–º okdesk_company_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    db.execute(
                        "UPDATE users SET okdesk_company_id = ? WHERE telegram_id = ?",
                        (company['id'], user_id)
                    )
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω okdesk_company_id={company['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
                db.commit()
                db.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ okdesk_company_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            return company
        
        logger.info(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
        
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ create_if_not_found, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
        if create_if_not_found:
            logger.info(f"üîç –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é.")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ù–ù
            company_name = f"–ò–ü/–û–û–û —Å –ò–ù–ù {inn}"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
            new_company = await self.create_company(
                name=company_name, 
                inn=inn,
                comment=f"–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram –±–æ—Ç–∞ –ø–æ –ò–ù–ù {inn}"
            )
            
            if new_company and 'id' in new_company:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {new_company.get('name')} (ID: {new_company['id']})")
                return new_company
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Å –ò–ù–ù {inn}")
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {e}")
        return None
