import re
from typing import Optional

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    if clean_phone.startswith('+7') and len(clean_phone) == 12:
        return True
    if clean_phone.startswith('8') and len(clean_phone) == 11:
        return True
    if clean_phone.startswith('7') and len(clean_phone) == 11:
        return True
    
    return False

def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    if digits.startswith('8') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('7') and len(digits) == 11:
        return '+' + digits
    elif len(digits) == 10:
        return '+7' + digits
    
    return phone

def validate_inn(inn: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    clean_inn = re.sub(r'\D', '', inn)
    
    # –ò–ù–ù –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä
    if len(clean_inn) not in [10, 12]:
        return False
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ò–ù–ù
    if len(clean_inn) == 10:
        return validate_inn_10(clean_inn)
    elif len(clean_inn) == 12:
        return validate_inn_12(clean_inn)
    
    return False

def validate_inn_10(inn: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è 10-–∑–Ω–∞—á–Ω–æ–≥–æ –ò–ù–ù (—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞)"""
    coefficients = [2, 4, 10, 3, 5, 9, 4, 6, 8]
    
    try:
        digits = [int(d) for d in inn]
        check_sum = sum(coef * digit for coef, digit in zip(coefficients, digits[:9])) % 11
        check_sum = check_sum % 10
        return check_sum == digits[9]
    except (ValueError, IndexError):
        return False

def validate_inn_12(inn: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è 12-–∑–Ω–∞—á–Ω–æ–≥–æ –ò–ù–ù (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞)"""
    coefficients_1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]
    coefficients_2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]
    
    try:
        digits = [int(d) for d in inn]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        check_sum_1 = sum(coef * digit for coef, digit in zip(coefficients_1, digits[:10])) % 11
        check_sum_1 = check_sum_1 % 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        check_sum_2 = sum(coef * digit for coef, digit in zip(coefficients_2, digits[:11])) % 11
        check_sum_2 = check_sum_2 % 10
        
        return check_sum_1 == digits[10] and check_sum_2 == digits[11]
    except (ValueError, IndexError):
        return False

def format_datetime(dt) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    return dt.strftime("%d.%m.%Y –≤ %H:%M")

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
    if not text:
        return ""
    
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram"""
    if not text:
        return ""
    
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def extract_issue_id_from_url(url: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞—è–≤–∫–∏ –∏–∑ URL Okdesk"""
    pattern = r'/issues/(\d+)'
    match = re.search(pattern, url)
    return int(match.group(1)) if match else None

def create_user_mention(user_id: int, username: str = None, full_name: str = None) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–æ–≤"""
    if username:
        return f"@{username} (ID: {user_id})"
    elif full_name:
        return f"{full_name} (ID: {user_id})"
    else:
        return f"User {user_id}"

def format_issue_status(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏"""
    status_map = {
        "opened": "üü° –û—Ç–∫—Ä—ã—Ç–∞",
        "in_progress": "üîµ –í —Ä–∞–±–æ—Ç–µ",
        "on_hold": "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "resolved": "‚úÖ –†–µ—à–µ–Ω–∞",
        "closed": "üîí –ó–∞–∫—Ä—ã—Ç–∞",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
    }
    
    return status_map.get(status.lower(), f"üìã {status}")

def create_issue_title(description: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if not description:
        return "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    clean_description = ' '.join(description.strip().split())
    
    # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
    if len(clean_description) <= 50:
        return clean_description
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = clean_description.split('.')
    if sentences and len(sentences[0]) <= 50:
        return sentences[0].strip()
    
    # –ò—â–µ–º –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    for punct in [',', ';', ':', '!', '?']:
        parts = clean_description.split(punct)
        if parts and len(parts[0]) <= 50:
            return parts[0].strip()
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    words = clean_description.split()
    title = ""
    for word in words:
        if len(title + word) > 47:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è "..."
            break
        title += word + " "
    
    return title.strip() + "..."

def validate_env_variables() -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    import os
    
    required_vars = [
        'BOT_TOKEN',
        'OKDESK_API_URL',
        'OKDESK_API_TOKEN'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    return missing_vars
