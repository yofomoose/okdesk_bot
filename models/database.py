from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, Boolean, BigInteger, BigInteger
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import config

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ echo –¥–ª—è production)
engine = create_engine(config.DATABASE_URL, echo=False)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(BigInteger, unique=True, index=True, nullable=False)
    username = Column(String, nullable=True)
    user_type = Column(String, nullable=False)  # "physical" –∏–ª–∏ "legal"
    
    # –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
    full_name = Column(String, nullable=True)
    phone = Column(String, nullable=True)
    contact_auth_code = Column(String, nullable=True)  # –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk
    okdesk_contact_id = Column(Integer, nullable=True)  # ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk
    portal_token = Column(String, nullable=True)  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞
    
    # –î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
    inn_company = Column(String, nullable=True)
    company_id = Column(Integer, nullable=True)  # ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Okdesk
    company_name = Column(String, nullable=True)
    service_object_name = Column(String, nullable=True)  # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    is_registered = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Issue(Base):
    """–ú–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏"""
    __tablename__ = "issues"
    
    id = Column(Integer, primary_key=True, index=True)
    telegram_user_id = Column(BigInteger, nullable=False)
    okdesk_issue_id = Column(Integer, nullable=False)
    title = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    status = Column(String, nullable=False)
    priority = Column(String, nullable=True)
    
    # –°—Å—ã–ª–∫–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    okdesk_url = Column(String, nullable=True)
    issue_number = Column(String, nullable=True)
    telegram_message_id = Column(Integer, nullable=True)  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã (1-5 –∑–≤–µ–∑–¥)
    rating = Column(Integer, nullable=True)
    rating_comment = Column(Text, nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Comment(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    __tablename__ = "comments"
    
    id = Column(Integer, primary_key=True, index=True)
    issue_id = Column(Integer, nullable=False)  # ID –∑–∞—è–≤–∫–∏ –≤ –Ω–∞—à–µ–π –ë–î
    okdesk_comment_id = Column(Integer, nullable=True)  # ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Okdesk
    telegram_user_id = Column(BigInteger, nullable=False)
    content = Column(Text, nullable=False)
    is_from_okdesk = Column(Boolean, default=False)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏—à–µ–ª –∏–∑ Okdesk
    
    created_at = Column(DateTime, default=datetime.utcnow)

# –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç checkfirst=True –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.
    """
    try:
        # checkfirst=True –æ–∑–Ω–∞—á–∞–µ—Ç: —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Base.metadata.create_all(bind=engine, checkfirst=True)
        print("üìä –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
