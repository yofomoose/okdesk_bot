#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è OKDesk Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, API, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ webhook
"""

import os
import sqlite3
import asyncio
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from config import DATABASE_URL, BOT_TOKEN, OKDESK_API_URL, OKDESK_API_TOKEN
    from services.okdesk_api import OkdeskAPI
    from database.models import Issue, User, Comment
    from services.issue_service import IssueService
    from services.user_service import UserService
    from services.comment_service import CommentService
    import requests
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*50}")
    print(f"  {title}")
    print(f"{'='*50}")

def print_status(message, status):
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ (‚úÖ –∏–ª–∏ ‚ùå)"""
    icon = "‚úÖ" if status else "‚ùå"
    print(f"{icon} {message}")

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    config_vars = {
        'BOT_TOKEN': BOT_TOKEN,
        'OKDESK_API_URL': OKDESK_API_URL,
        'OKDESK_API_TOKEN': OKDESK_API_TOKEN,
        'DATABASE_URL': DATABASE_URL
    }
    
    all_ok = True
    for var_name, var_value in config_vars.items():
        if var_value:
            print_status(f"{var_name}: {'*' * 10}", True)
        else:
            print_status(f"{var_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", False)
            all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
    env_exists = os.path.exists('.env')
    print_status(f"–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", env_exists)
    
    return all_ok and env_exists

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    try:
        # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if DATABASE_URL.startswith('sqlite:///'):
            db_path = DATABASE_URL.replace('sqlite:///', '')
        elif DATABASE_URL.startswith('sqlite:////'):
            db_path = DATABASE_URL.replace('sqlite:////', '/')
        else:
            print_status(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î: {DATABASE_URL}", False)
            return False
        
        print(f"üìç –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        db_exists = os.path.exists(db_path)
        print_status(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", db_exists)
        
        if not db_exists:
            return False
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [table[0] for table in cursor.fetchall()]
        
        expected_tables = ['users', 'issues', 'comments']
        for table in expected_tables:
            table_exists = table in tables
            print_status(f"–¢–∞–±–ª–∏—Ü–∞ '{table}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", table_exists)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
        for table in expected_tables:
            if table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ '{table}': {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(db_path)
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {file_size} –±–∞–π—Ç ({file_size / 1024:.1f} KB)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        mod_time = datetime.fromtimestamp(os.path.getmtime(db_path))
        print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {mod_time}")
        
        conn.close()
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", False)
        return False

async def check_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Okdesk API"""
    print_header("–ü–†–û–í–ï–†–ö–ê OKDESK API")
    
    try:
        okdesk_api = OkdeskAPI()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection_ok = await okdesk_api.test_connection()
        print_status("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Okdesk API", connection_ok)
        
        if connection_ok:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                user_info = await okdesk_api.get_current_user()
                if user_info:
                    print(f"üë§ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                    print(f"üìß Email: {user_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–∞–º
                issues = await okdesk_api.get_issues(limit=1)
                print_status(f"–î–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–∞–º (–Ω–∞–π–¥–µ–Ω–æ: {len(issues)})", len(issues) >= 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
                contacts = await okdesk_api.get_contacts(limit=1)
                print_status(f"–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º (–Ω–∞–π–¥–µ–Ω–æ: {len(contacts)})", len(contacts) >= 0)
                
            except Exception as e:
                print_status(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö API: {e}", False)
        
        await okdesk_api.close()
        return connection_ok
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}", False)
        return False

def check_webhook():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook"""
    print_header("–ü–†–û–í–ï–†–ö–ê WEBHOOK")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook –Ω–∞ localhost:8000
        webhook_url = "http://localhost:8000/okdesk-webhook"
        
        try:
            response = requests.get(webhook_url, timeout=5)
            # Webhook –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 405 (Method Not Allowed) –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
            webhook_ok = response.status_code == 405
            print_status(f"Webhook –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {webhook_url}", webhook_ok)
            print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print_status("Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)", False)
            return False
        except Exception as e:
            print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}", False)
            return False
        
        return webhook_ok
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}", False)
        return False

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print_header("–ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í")
    
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        result = subprocess.run(['docker', 'ps', '--format', 'table {{.Names}}\t{{.Status}}'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            okdesk_containers = [line for line in lines if 'okdesk' in line.lower()]
            
            print(f"üê≥ –ù–∞–π–¥–µ–Ω–æ OKDesk –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(okdesk_containers) - 1 if len(okdesk_containers) > 1 else 0}")  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
            for container in okdesk_containers[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                name, status = container.split('\t')
                is_running = 'Up' in status
                print_status(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name}: {status}", is_running)
            
            return len(okdesk_containers) > 1
        else:
            print_status("Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", False)
            return False
            
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}", False)
        return False

async def check_database_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UserService
        users = UserService.get_all_users()
        print_status(f"UserService —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)})", True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IssueService
        issues = IssueService.get_all_issues()
        print_status(f"IssueService —Ä–∞–±–æ—Ç–∞–µ—Ç (–∑–∞—è–≤–æ–∫: {len(issues)})", True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CommentService
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if issues:
            comments = CommentService.get_issue_comments(issues[0].id)
            print_status(f"CommentService —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–µ: {len(comments)})", True)
        else:
            print_status("CommentService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–µ—Ç –∑–∞—è–≤–æ–∫)", True)
        
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}", False)
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ OKDESK BOT")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {}
    
    results['config'] = check_config()
    results['database'] = check_database()
    results['docker'] = check_docker()
    results['webhook'] = check_webhook()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    async def async_checks():
        results['api'] = await check_api()
        results['db_services'] = await check_database_services()
    
    asyncio.run(async_checks())
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    total_checks = len(results)
    passed_checks = sum(1 for result in results.values() if result)
    
    for check_name, result in results.items():
        print_status(f"{check_name.upper()}", result)
    
    print(f"\nüìä –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{total_checks}")
    
    if passed_checks == total_checks:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif passed_checks >= total_checks * 0.8:
        print("\n‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–û. –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_header("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    
    if not results.get('config'):
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    if not results.get('database'):
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
    
    if not results.get('docker'):
        print("‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: make start")
    
    if not results.get('api'):
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω Okdesk API –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞")
    
    if not results.get('webhook'):
        print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    
    return passed_checks == total_checks

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)
