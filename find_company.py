#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import os
import sys
import json
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.okdesk_api import OkdeskAPI

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_find_company_by_inn():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù"""
    api = OkdeskAPI()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(sys.argv) > 1:
            inn = sys.argv[1]
        else:
            inn = input("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
        
        print(f"\nüîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ò–ù–ù: {inn}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        company = await api.find_company_by_inn(inn, create_if_not_found=False)
        
        if company:
            print(f"\n‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞!")
            print(f"ID: {company.get('id')}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {company.get('name')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ò–ù–ù
            print("\n–î–∞–Ω–Ω—ã–µ –ò–ù–ù:")
            print(f"inn: {company.get('inn', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(f"inn_company: {company.get('inn_company', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(f"legal_inn: {company.get('legal_inn', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if 'parameters' in company:
                print("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                for param in company.get('parameters', []):
                    print(f"{param.get('code', '–ë–µ–∑ –∫–æ–¥–∞')}: {param.get('value', '–ë–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º custom_parameters
            if 'custom_parameters' in company:
                print("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                for key, value in company.get('custom_parameters', {}).items():
                    print(f"{key}: {value}")
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            show_all = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏? (y/n): ").lower() == 'y'
            if show_all:
                print("\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
                print(json.dumps(company, ensure_ascii=False, indent=2))
        else:
            print(f"\n‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            create = input("\n–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é —Å —ç—Ç–∏–º –ò–ù–ù? (y/n): ").lower() == 'y'
            if create:
                name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ")
                
                print(f"\n–°–æ–∑–¥–∞—é –∫–æ–º–ø–∞–Ω–∏—é '{name}' —Å –ò–ù–ù {inn}...")
                new_company = await api.create_company(
                    name=name,
                    inn=inn,
                    comment=f"–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ò–ù–ù {inn}"
                )
                
                if new_company and 'id' in new_company:
                    print(f"\n‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    print(f"ID: {new_company.get('id')}")
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_company.get('name')}")
                else:
                    print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é")
    
    finally:
        await api.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_find_company_by_inn()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
