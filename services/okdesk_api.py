"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Okdesk API - –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –≤ URL
"""
import aiohttp
import asyncio
import logging
from typing import Dict, List, Optional
import config

logger = logging.getLogger(__name__)

class OkdeskAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Okdesk"""
    
    def __init__(self):
        self.base_url = config.OKDESK_API_URL
        self.token = config.OKDESK_API_TOKEN
        self.session = None
        
    async def __aenter__(self):
        self.session = await self._get_session()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        return aiohttp.ClientSession(
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        )
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None, headers: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        if not self.session:
            self.session = await self._get_session()
            
        # –ü–æ—Å–∫–æ–ª—å–∫—É –≤ base_url —É–∂–µ –µ—Å—Ç—å /api/v1, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º endpoint
        url = f"{self.base_url}{endpoint}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º API —Ç–æ–∫–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if '?' in endpoint:
            url += f"&api_token={self.token}"
        else:
            url += f"?api_token={self.token}"
            
        logger.info(f"{method} {url}")
        if headers:
            logger.info(f"Headers: {headers}")
        
        try:
            async with self.session.request(method, url, json=data, headers=headers) as response:
                response_text = await response.text()
                logger.info(f"Response status: {response.status}")
                logger.info(f"Response: {response_text[:500]}")
                
                if response.status in [200, 201]:
                    try:
                        return await response.json()
                    except:
                        return {"success": True, "text": response_text}
                else:
                    logger.error(f"API Error {response.status}: {response_text}")
                    return None
        except Exception as e:
            logger.error(f"API Error: {e}")
            return None
    
    async def get_issues(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π endpoint –¥–ª—è –∑–∞—è–≤–æ–∫
            endpoint = f"/issues?limit={limit}"
            
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            if isinstance(response, dict):
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ data —Å –º–∞—Å—Å–∏–≤–æ–º
                if 'data' in response:
                    return response['data']
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ issues —Å –º–∞—Å—Å–∏–≤–æ–º  
                elif 'issues' in response:
                    return response['issues']
                # –ï—Å–ª–∏ —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–∫–∏
                elif 'id' in response:
                    return [response]
            elif isinstance(response, list):
                return response
                
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    async def get_issue(self, issue_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID"""
        response = await self._make_request('GET', f'/issues/{issue_id}')
        return response if response else {}
    
    async def create_issue(self, title: str, description: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        data = {
            'title': title,
            'description': description,
            'type_id': kwargs.get('type_id', 1),  # –¢–∏–ø –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'priority_id': kwargs.get('priority_id', 2),  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'status_id': kwargs.get('status_id', 1),  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'contact_id' in kwargs:
            data['contact_id'] = kwargs['contact_id']
        if 'company_id' in kwargs:
            data['company_id'] = kwargs['company_id']
        if 'assignee_id' in kwargs:
            data['assignee_id'] = kwargs['assignee_id']
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', '/issues', data)
        return response if response else {}
    
    async def add_comment_as_contact(self, issue_id: int, content: str, contact_auth_code: str = None) -> Dict:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not contact_auth_code:
            return {}
            
        try:
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è endpoint –±–µ–∑ api_token
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            if '?' in self.base_url:
                base_url_clean = self.base_url.split('?')[0]
            else:
                base_url_clean = self.base_url
            
            comment_url = f"{base_url_clean}/issues/{issue_id}/comments"
            
            data = {
                'content': content,
                'public': True,
                'contact_auth_code': contact_auth_code
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            logger.info(f"URL: {comment_url}")
            logger.info(f"Data (–±–µ–∑ –∫–æ–¥–∞): {dict((k, v if k != 'contact_auth_code' else f'{v[:4]}****') for k, v in data.items())}")
            
            if not self.session:
                self.session = await self._get_session()
            
            async with self.session.post(comment_url, json=data) as resp:
                logger.info(f"Response status: {resp.status}")
                response_text = await resp.text()
                logger.info(f"Response: {response_text}")
                
                if resp.status in [200, 201]:
                    if response_text:
                        try:
                            result = await resp.json()
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: ID {result.get('id')}")
                            return result
                        except:
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–±–µ–∑ JSON –æ—Ç–≤–µ—Ç–∞)")
                            return {"success": True}
                    return {"success": True}
                else:
                    logger.error(f"API Error {resp.status}: {response_text}")
                    return {}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return {}

    async def add_comment(self, issue_id: int, content: str, is_public: bool = True, author_id: int = None, author_name: str = None, client_phone: str = None, contact_auth_code: str = None) -> Dict:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –µ–≥–æ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        if contact_auth_code:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            auth_response = await self.add_comment_as_contact(issue_id, content, contact_auth_code)
            if auth_response and ('id' in auth_response or auth_response.get('success')):
                logger.info("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return auth_response
            logger.info("–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        if author_name:
            formatted_content = f"üí¨ **{author_name}**:\n\n{content}"
        else:
            formatted_content = content
        
        data = {
            'content': formatted_content,
            'public': is_public,
            'author_id': config.OKDESK_SYSTEM_USER_ID
        }
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {config.OKDESK_SYSTEM_USER_ID})")
        response = await self._make_request('POST', f'/issues/{issue_id}/comments', data)
        
        if response and 'id' in response:
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω (ID: {response['id']})")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response}")
        
        return response if response else {}
    
    async def get_employees(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            endpoints = [
                f"/users?limit={limit}",
                f"/staff?limit={limit}",
                f"/employees?limit={limit}"
            ]
            
            for endpoint in endpoints:
                try:
                    response = await self._make_request('GET', endpoint)
                    
                    if response:
                        if isinstance(response, list):
                            return response
                        elif isinstance(response, dict) and 'data' in response:
                            return response['data']
                        elif isinstance(response, dict) and 'users' in response:
                            return response['users']
                except Exception as e:
                    logger.warning(f"Endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    continue
            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω endpoint")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
            return []
    
    async def find_employee_by_name(self, full_name: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            employees = await self.get_employees(100)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_name = full_name.lower().strip()
            
            for employee in employees:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏
                employee_name = employee.get('name', '').lower().strip()
                first_name = employee.get('first_name', '').lower().strip()
                last_name = employee.get('last_name', '').lower().strip()
                full_employee_name = f"{first_name} {last_name}".strip()
                
                if (employee_name == search_name or 
                    full_employee_name == search_name or
                    search_name in employee_name or
                    search_name in full_employee_name):
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.get('name', full_employee_name)} (ID: {employee.get('id')})")
                    return employee
            
            logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º '{full_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            return None
    
    async def get_current_user(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ API"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        endpoints_to_try = ['/account', '/users/current', '/user', '/profile']
        
        for endpoint in endpoints_to_try:
            response = await self._make_request('GET', endpoint)
            if response:
                return response
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API")
        return {'id': 1}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    async def get_contacts(self, limit: int = 50, **filters) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π endpoint –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            endpoint = f"/contacts?limit={limit}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for key, value in filters.items():
                if value:
                    endpoint += f"&{key}={value}"
            
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∏ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
            if isinstance(response, list):
                return response
            elif isinstance(response, dict):
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ data —Å –º–∞—Å—Å–∏–≤–æ–º
                if 'data' in response:
                    return response['data']
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –µ–¥–∏–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É)
                elif 'id' in response:
                    return [response]
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return []
    
    async def search_contact_by_phone(self, phone: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            contacts = await self.get_contacts(100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            for contact in contacts:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã (—É–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
                contact_phone = contact.get('phone', '').replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
                search_phone = phone.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
                if contact_phone == search_phone:
                    logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                    return contact
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
    
    async def create_contact(self, first_name: str, last_name: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        data = {
            'first_name': first_name,
            'last_name': last_name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in ['phone', 'email', 'company_id', 'position', 'comment', 'login', 'password', 'telegram_username', 'patronymic', 'mobile_phone']:
            if field in kwargs and kwargs[field]:
                data[field] = kwargs[field]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'access_level' in kwargs and kwargs['access_level']:
            data['access_level'] = kwargs['access_level']
        elif not kwargs.get('company_id'):  # –î–ª—è —Ñ–∏–∑–ª–∏—Ü –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
            data['access_level'] = []
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', '/contacts', data)
        return response if response else {}

    async def create_company(self, name: str, inn: str = None, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é"""
        data = {
            'name': name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ù–ù —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω (–¥–ª—è —é—Ä–ª–∏—Ü)
        if inn:
            data['inn_company'] = inn
        
        for field in ['address', 'phone', 'email', 'comment']:
            if field in kwargs and kwargs[field]:
                data[field] = kwargs[field]
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', '/companies', data)
        return response if response else {}
    
    async def update_contact(self, contact_id: int, **kwargs) -> Dict:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏)"""
        data = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for field in ['company_id', 'first_name', 'last_name', 'phone', 'email', 'position']:
            if field in kwargs and kwargs[field] is not None:
                data[field] = kwargs[field]
        
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            return {}
        
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç {contact_id} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('PUT', f'/contacts/{contact_id}', data)
        return response if response else {}

    async def get_companies(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
        try:
            endpoint = f"/companies?limit={limit}"
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            if isinstance(response, list):
                return response
            elif isinstance(response, dict) and 'data' in response:
                return response['data']
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            return []

    async def search_company_by_inn(self, inn: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù"""
        try:
            logger.info(f"–ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –ò–ù–ù: {inn}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
            companies = await self.get_companies(100)
            
            # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –Ω—É–∂–Ω—ã–º –ò–ù–ù –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            for company in companies:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –≥–¥–µ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ò–ù–ù
                if (company.get('inn') == inn or 
                    company.get('legal_inn') == inn or
                    company.get('tax_number') == inn):
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn}: {company.get('name')}")
                    return company
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏
                parameters = company.get('parameters', [])
                if parameters:
                    for param in parameters:
                        if isinstance(param, dict):
                            param_name = param.get('name', '').lower()
                            param_value = str(param.get('value', ''))
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª—è –ò–ù–ù
                            if any(inn_field in param_name for inn_field in ['–∏–Ω–Ω', 'inn', '–ò–ù–ù']):
                                if param_value == inn:
                                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn}: {company.get('name')}")
                                    return company
            
            logger.info(f"–ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù: {e}")
            return None

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
            response = await self._make_request('GET', '/companies?limit=1')
            if response is not None:
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Okdesk API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Okdesk API")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False
