#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import aiohttp
import logging
import base64
from typing import Dict, List, Optional, Any
from urllib.parse import urljoin
import config

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class OkdeskAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API OkDesk"""
    
    def __init__(self, api_url: str = None, api_token: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
        api_url_raw = api_url or config.OKDESK_API_URL
        self.api_token = api_token or config.OKDESK_API_TOKEN
        
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        # –£–±–∏—Ä–∞–µ–º trailing —Å–ª–µ—à–∏ –∏ –ª–∏—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—É—Ç–∏
        if '://' in api_url_raw:
            protocol, rest = api_url_raw.split('://')
            base_url = protocol + '://' + rest.split('/')[0]
        else:
            base_url = api_url_raw.split('/')[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_url = f"{base_url}/api/v1/"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'Content-Type': 'application/json'
            # –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –∞ –Ω–µ —á–µ—Ä–µ–∑ Authorization
        }
        
        logger.info(f"API URL: {self.api_url}")
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API OkDesk –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        # –î–æ–±–∞–≤–ª—è–µ–º API —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
        # –£–¥–∞–ª—è–µ–º —Å–ª–µ—à –≤ –Ω–∞—á–∞–ª–µ endpoint, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ—à–∞
        endpoint_clean = endpoint.lstrip('/')
        if '?' in endpoint_clean:
            url = f"{self.api_url}{endpoint_clean}&api_token={self.api_token}"
        else:
            url = f"{self.api_url}{endpoint_clean}?api_token={self.api_token}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"{method} {url}")
        if data:
            logger.info(f"Request data: {data}")
        
        try:
            async with aiohttp.ClientSession() as session:
                if method == 'GET':
                    async with session.get(url, headers=self.headers) as resp:
                        response_text = await resp.text()
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        logger.info(f"Response status: {resp.status}")
                        logger.info(f"Response: {response_text}")
                        
                        if resp.status == 200:
                            try:
                                parsed = json.loads(response_text)
                                logger.info(f"Parsed response: {str(parsed)[:100]}...")
                                return parsed
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                return None
                        else:
                            logger.error(f"API Error {resp.status}: {response_text}")
                            return None
                
                elif method in ['POST', 'PUT']:
                    json_data = json.dumps(data) if data else None
                    
                    async with session.request(method, url, headers=self.headers, data=json_data) as resp:
                        response_text = await resp.text()
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        logger.info(f"Response status: {resp.status}")
                        logger.info(f"Response: {response_text}")
                        
                        if resp.status in [200, 201]:
                            try:
                                parsed = json.loads(response_text)
                                logger.info(f"Parsed response: {str(parsed)[:100]}...")
                                return parsed
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                if "success" in response_text.lower():
                                    return {"success": True}
                                return None
                        else:
                            logger.error(f"API Error {resp.status}: {response_text}")
                            logger.error(f"Error details: {json.loads(response_text) if response_text else None}")
                            return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return None
    
    async def get_issues(self, status_ids: List[int] = None, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        try:
            # –°—É–¥—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, endpoint /issues –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404,
            # –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞—è–≤–∫–∞–º
            # –ù–∞—á–Ω–µ–º —Å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É
            issues = []
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
            for issue_id in range(limit, 0, -1):
                try:
                    issue = await self.get_issue(issue_id)
                    if issue and 'errors' not in issue:
                        issues.append(issue)
                        if len(issues) >= limit:
                            break
                except Exception:
                    continue
                    
            return issues
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    async def get_issue(self, issue_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            response = await self._make_request('GET', f'issues/{issue_id}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            if isinstance(response, dict) and 'errors' not in response:
                return response
            elif isinstance(response, dict) and 'errors' in response:
                logger.warning(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è –∑–∞—è–≤–∫–∏ {issue_id}: {response.get('errors')}")
            
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {issue_id}: {e}")
            return {}
    
    async def create_issue(self, title: str, description: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üìå –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã create_issue: {kwargs}")
        
        data = {
            'title': title,
            'description': description,
            'type_id': kwargs.get('type_id', 1),  # –¢–∏–ø –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'priority_id': kwargs.get('priority_id', 2),  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'status_id': kwargs.get('status_id', 1),  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É API Okdesk
        client = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if 'contact_id' in kwargs and kwargs['contact_id']:
            client['contact'] = {'id': kwargs['contact_id']}
            logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫ –∑–∞—è–≤–∫–µ: contact_id = {kwargs['contact_id']}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –Ω–µ—Ç contact_id, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        elif 'phone' in kwargs and kwargs['phone'] and 'contact_id' not in kwargs:
            contact = await self.find_contact_by_phone(kwargs['phone'])
            if contact and 'id' in contact:
                client['contact'] = {'id': contact['id']}
                logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: contact_id = {contact['id']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if 'company_id' in kwargs and kwargs['company_id']:
            client['company'] = {'id': kwargs['company_id']}
            logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∫ –∑–∞—è–≤–∫–µ: company_id = {kwargs['company_id']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è
        if client:
            data['client'] = client
            logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ: {client}")
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if 'contact_id' in kwargs:
            data['contact_id'] = kwargs['contact_id']
        if 'company_id' in kwargs:
            data['company_id'] = kwargs['company_id']
        if 'assignee_id' in kwargs:
            data['assignee_id'] = kwargs['assignee_id']
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', 'issues', data)
        return response if response else {}
    
    async def add_comment(self, issue_id: int, content: str, is_public: bool = True, 
                         author_id: int = None, author_type: str = None, 
                         author_name: str = None, client_phone: str = None, 
                         contact_auth_code: str = None, contact_id: int = None) -> Dict:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ
        
        Args:
            issue_id: ID –∑–∞—è–≤–∫–∏
            content: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è  
            is_public: –ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            author_id: ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            author_type: –¢–∏–ø –∞–≤—Ç–æ—Ä–∞ (contact, employee, client)
            author_name: –ò–º—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_auth_code: –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —á–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É)
        """
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω contact_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
        if contact_id:
            author_id = contact_id
            author_type = 'contact'
        
        data = {
            'content': content,
            'public': is_public,
        }
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if contact_auth_code:
            endpoint = f"/issues/{issue_id}/contact_comments"
            data['auth_code'] = contact_auth_code
            return await self._contact_comment(endpoint, data)
        
        endpoint = f"/issues/{issue_id}/comments"
        
        logger.info(f"=== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø ===")
        logger.info(f"issue_id: {issue_id}")
        logger.info(f"author_id: {author_id}")
        logger.info(f"author_type: {author_type}")
        logger.info(f"client_phone: {client_phone}")
        logger.info(f"contact_id: {contact_id}")
        logger.info(f"content: {content[:50]}...")
        
        # author_id –∏ author_type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
        if author_id and author_type:
            data['author_id'] = author_id
            data['author_type'] = author_type
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: author_id={author_id}, author_type={author_type}")
        else:
            logger.info(f"‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã author_id –∏/–∏–ª–∏ author_type")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω client_phone
            if client_phone:
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {client_phone}")
                contact = await self.find_contact_by_phone(client_phone)
                
                if contact and 'id' in contact:
                    data['author_id'] = contact['id']
                    data['author_type'] = 'contact'
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: author_id={contact['id']}, author_type=contact")
                else:
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    data['author_id'] = 5  # ID Manager
                    data['author_type'] = 'employee'
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: author_id=5, author_type=employee")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ fallback
                data['author_id'] = 5  # ID Manager –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
                data['author_type'] = 'employee'
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: author_id=5, author_type=employee")
        
        if author_name:
            data['author_name'] = author_name
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {data}")
        response = await self._make_request('POST', endpoint, data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API
        if response:
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç API: {response}")
            return response
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response}")
            return {}
    
    async def _contact_comment(self, endpoint: str, data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è auth_code)"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Content-Type': 'application/json'}
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
                logger.info(f"Endpoint: {endpoint}")
                logger.info(f"Data: {data}")
                
                async with session.post(
                    urljoin(self.api_url, endpoint),
                    headers=headers,
                    data=json.dumps(data)
                ) as resp:
                    response_text = await resp.text()
                    
                    if resp.status in [200, 201]:
                        try:
                            response = json.loads(response_text)
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {response}")
                            return response
                        except:
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–±–µ–∑ JSON –æ—Ç–≤–µ—Ç–∞)")
                            return {"success": True}
                    else:
                        logger.error(f"API Error {resp.status}: {response_text}")
                        return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return {}
    
    async def get_contacts(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            endpoint = f"/contacts?limit={limit}"
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            if isinstance(response, list):
                return response
            
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return []
    
    async def find_contact_by_phone(self, phone: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)"""
        if not phone:
            logger.warning("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            return None
            
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            clean_phone = ''.join(c for c in phone if c.isdigit())
            
            if len(clean_phone) < 5:
                logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
                return None
                
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            endpoint = f"/contacts?phone={phone}"
            logger.info(f"üîç –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")
            response = await self._make_request('GET', endpoint)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ id
            if response and isinstance(response, dict) and 'id' in response:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ API: {response.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {response.get('id')})")
                return response
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            # –í–∞—Ä–∏–∞–Ω—Ç —Å 7 –≤ –Ω–∞—á–∞–ª–µ
            if clean_phone.startswith('8') and len(clean_phone) == 11:
                alt_phone = '7' + clean_phone[1:]
                endpoint = f"/contacts?phone={alt_phone}"
                logger.info(f"üîç –ü–æ–∏—Å–∫ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {alt_phone}")
                response = await self._make_request('GET', endpoint)
                
                if response and isinstance(response, dict) and 'id' in response:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ API: {response.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {response.get('id')})")
                    return response
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)")
            endpoint = f"/contacts?limit=100"  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            response = await self._make_request('GET', endpoint)
            
            if response and isinstance(response, list):
                for contact in response:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
                    contact_phone = contact.get('phone', '')
                    contact_mobile = contact.get('mobile_phone', '')
                    
                    # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    clean_contact_phone = ''.join(c for c in contact_phone if c.isdigit())
                    clean_contact_mobile = ''.join(c for c in contact_mobile if c.isdigit())
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–∏—Ñ—Ä–∞–º (–µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª–∏–Ω–Ω—ã–π)
                    if len(clean_phone) >= 10 and len(clean_contact_phone) >= 10:
                        if clean_phone[-10:] == clean_contact_phone[-10:]:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                            return contact
                    
                    if len(clean_phone) >= 10 and len(clean_contact_mobile) >= 10:
                        if clean_phone[-10:] == clean_contact_mobile[-10:]:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                            return contact
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –¥—Ä—É–≥–æ–º
                    if clean_phone and (clean_phone in clean_contact_phone or clean_phone in clean_contact_mobile):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
                    
                    if clean_contact_phone and clean_contact_phone in clean_phone:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
                    
                    if clean_contact_mobile and clean_contact_mobile in clean_phone:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
            
            logger.info(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
            return None
    
    async def create_contact(self, first_name: str, last_name: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        data = {
            'first_name': first_name,
            'last_name': last_name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in ['phone', 'email', 'company_id', 'position', 'comment']:
            if field in kwargs and kwargs[field]:
                data[field] = kwargs[field]
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', 'contacts', data)
        return response if response else {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def search_contact_by_phone(self, phone: str) -> Dict:
        """–ê–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ find_contact_by_phone –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.find_contact_by_phone(phone)
    
    async def close(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å
        pass
