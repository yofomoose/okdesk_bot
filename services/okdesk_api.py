#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import aiohttp
import logging
import base64
from typing import Dict, List, Optional, Any
from urllib.parse import urljoin
import config

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class OkdeskAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API OkDesk"""
    
    def __init__(self, api_url: str = None, api_token: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
        api_url_raw = api_url or config.OKDESK_API_URL
        self.api_token = api_token or config.OKDESK_API_TOKEN
        
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        # –£–±–∏—Ä–∞–µ–º trailing —Å–ª–µ—à–∏ –∏ –ª–∏—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—É—Ç–∏
        if '://' in api_url_raw:
            protocol, rest = api_url_raw.split('://')
            base_url = protocol + '://' + rest.split('/')[0]
        else:
            base_url = api_url_raw.split('/')[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_url = f"{base_url}/api/v1/"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            'Content-Type': 'application/json'
            # –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, –∞ –Ω–µ —á–µ—Ä–µ–∑ Authorization
        }
        
        logger.info(f"API URL: {self.api_url}")
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API OkDesk –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        # –î–æ–±–∞–≤–ª—è–µ–º API —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
        # –£–¥–∞–ª—è–µ–º —Å–ª–µ—à –≤ –Ω–∞—á–∞–ª–µ endpoint, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ—à–∞
        endpoint_clean = endpoint.lstrip('/')
        if '?' in endpoint_clean:
            url = f"{self.api_url}{endpoint_clean}&api_token={self.api_token}"
        else:
            url = f"{self.api_url}{endpoint_clean}?api_token={self.api_token}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"{method} {url}")
        if data:
            logger.info(f"Request data: {data}")
        
        try:
            async with aiohttp.ClientSession() as session:
                if method == 'GET':
                    async with session.get(url, headers=self.headers) as resp:
                        response_text = await resp.text()
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        logger.info(f"Response status: {resp.status}")
                        logger.info(f"Response: {response_text}")
                        
                        if resp.status == 200:
                            try:
                                parsed = json.loads(response_text)
                                logger.info(f"Parsed response: {str(parsed)[:100]}...")
                                return parsed
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                return None
                        else:
                            logger.error(f"API Error {resp.status}: {response_text}")
                            return None
                
                elif method in ['POST', 'PUT']:
                    json_data = json.dumps(data) if data else None
                    
                    async with session.request(method, url, headers=self.headers, data=json_data) as resp:
                        response_text = await resp.text()
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        logger.info(f"Response status: {resp.status}")
                        logger.info(f"Response: {response_text}")
                        
                        if resp.status in [200, 201]:
                            try:
                                parsed = json.loads(response_text)
                                logger.info(f"Parsed response: {str(parsed)[:100]}...")
                                return parsed
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                if "success" in response_text.lower():
                                    return {"success": True}
                                return None
                        else:
                            logger.error(f"API Error {resp.status}: {response_text}")
                            logger.error(f"Error details: {json.loads(response_text) if response_text else None}")
                            return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return None
    
    async def get_issues(self, status_ids: List[int] = None, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        try:
            # –°—É–¥—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, endpoint /issues –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404,
            # –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞—è–≤–∫–∞–º
            # –ù–∞—á–Ω–µ–º —Å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É
            issues = []
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
            for issue_id in range(limit, 0, -1):
                try:
                    issue = await self.get_issue(issue_id)
                    if issue and 'errors' not in issue:
                        issues.append(issue)
                        if len(issues) >= limit:
                            break
                except Exception:
                    continue
                    
            return issues
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    async def get_issue(self, issue_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            response = await self._make_request('GET', f'issues/{issue_id}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            if isinstance(response, dict) and 'errors' not in response:
                return response
            elif isinstance(response, dict) and 'errors' in response:
                logger.warning(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è –∑–∞—è–≤–∫–∏ {issue_id}: {response.get('errors')}")
            
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {issue_id}: {e}")
            return {}
            
    async def update_issue(self, issue_id: int, data: Dict) -> Dict:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        
        Args:
            issue_id: ID –∑–∞—è–≤–∫–∏
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {issue_id} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            response = await self._make_request('PUT', f'issues/{issue_id}', data)
            
            if response:
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ {issue_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                return response
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É {issue_id}")
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {issue_id}: {e}")
            return {}
    
    async def create_issue(self, title: str, description: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üìå –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã create_issue: {kwargs}")
        
        # –ü–æ–ª—É—á–∞–µ–º phone –∏–∑ kwargs –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        phone = kwargs.get('phone')
        user_telegram_id = kwargs.get('telegram_id')
        full_name = kwargs.get('full_name')
        
        data = {
            'title': title,
            'description': description,
            'type_id': kwargs.get('type_id', 1),  # –¢–∏–ø –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'priority_id': kwargs.get('priority_id', 2),  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'status_id': kwargs.get('status_id', 1),  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if user_telegram_id or full_name:
            telegram_info = "\n\n---\n"
            if full_name:
                telegram_info += f"üë§ –ò–º—è: {full_name}\n"
            if user_telegram_id:
                telegram_info += f"üÜî Telegram ID: {user_telegram_id}\n"
            if phone:
                telegram_info += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            telegram_info += "---"
            
            data['description'] = data['description'] + telegram_info
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É API Okdesk
        client = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if 'contact_id' in kwargs and kwargs['contact_id']:
            client['contact'] = {'id': kwargs['contact_id']}
            logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫ –∑–∞—è–≤–∫–µ: contact_id = {kwargs['contact_id']}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –Ω–µ—Ç contact_id, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        elif phone:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞—è–≤–∫–µ: {phone}")
            contact = await self.find_contact_by_phone(phone)
            if contact and 'id' in contact:
                client['contact'] = {'id': contact['id']}
                logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: contact_id = {contact['id']}")
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ kwargs –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                kwargs['contact_id'] = contact['id']
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º contact_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs['contact_id']}")
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
                if 'update_contact_callback' in kwargs and callable(kwargs['update_contact_callback']):
                    try:
                        logger.info(f"‚úÖ –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ contact_id={contact['id']}")
                        await kwargs['update_contact_callback'](contact['id'])
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ update_contact_callback: {e}")
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                logger.info(f"‚ùó –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
                
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_data = {
                    'first_name': kwargs.get('first_name', full_name.split()[0] if full_name else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                    'last_name': kwargs.get('last_name', ' '.join(full_name.split()[1:]) if full_name and len(full_name.split()) > 1 else 'Telegram'),
                    'phone': phone,
                    'comment': f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram. ID: {user_telegram_id}"
                }
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–µ–π
                if 'company_id' in kwargs and kwargs['company_id']:
                    contact_data['company_id'] = kwargs['company_id']
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                new_contact = await self.create_contact(**contact_data)
                
                if new_contact and 'id' in new_contact:
                    client['contact'] = {'id': new_contact['id']}
                    logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∫ –∑–∞—è–≤–∫–µ: contact_id = {new_contact['id']}")
                    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ kwargs –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    kwargs['contact_id'] = new_contact['id']
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π contact_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs['contact_id']}")
                    
                    # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
                    if 'update_contact_callback' in kwargs and callable(kwargs['update_contact_callback']):
                        try:
                            logger.info(f"‚úÖ –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è contact_id={new_contact['id']}")
                            await kwargs['update_contact_callback'](new_contact['id'])
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ update_contact_callback: {e}")
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω telegram_id, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    elif user_telegram_id:
                        try:
                            from services.database import DatabaseManager
                            db = DatabaseManager('okdesk_bot.db')
                            db.execute(
                                "UPDATE users SET okdesk_contact_id = ? WHERE telegram_id = ?",
                                (new_contact['id'], user_telegram_id)
                            )
                            db.commit()
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω okdesk_contact_id={new_contact['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                            db.close()
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ okdesk_contact_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {new_contact}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ
        if 'company_id' in kwargs and kwargs['company_id']:
            client['company'] = {'id': kwargs['company_id']}
            logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∫ –∑–∞—è–≤–∫–µ: company_id = {kwargs['company_id']}")
        # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –ò–ù–ù, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù
        elif 'inn' in kwargs and kwargs['inn']:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞—è–≤–∫–µ: {kwargs['inn']}")
            company = await self.find_company_by_inn(kwargs['inn'])
            if company and 'id' in company:
                client['company'] = {'id': company['id']}
                logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù: company_id = {company['id']}")
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ kwargs –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                kwargs['company_id'] = company['id']
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º company_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs['company_id']}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å user_telegram_id, –æ–±–Ω–æ–≤–ª—è–µ–º okdesk_company_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if user_telegram_id:
                    try:
                        from services.database import DatabaseManager
                        db = DatabaseManager('okdesk_bot.db')
                        db.execute(
                            "UPDATE users SET okdesk_company_id = ? WHERE telegram_id = ?",
                            (company['id'], user_telegram_id)
                        )
                        db.commit()
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω okdesk_company_id={company['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        db.close()
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ okdesk_company_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞—è–≤–∫–∏ –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        # –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã API –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ –∑–∞–ø—Ä–æ—Å
        data['client'] = client
        logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ: {client}")
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if 'contact_id' in kwargs:
            data['contact_id'] = kwargs['contact_id']
        if 'company_id' in kwargs:
            data['company_id'] = kwargs['company_id']
        if 'assignee_id' in kwargs:
            data['assignee_id'] = kwargs['assignee_id']
        
        # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', 'issues', data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        if response and 'id' in response:
            issue_id = response['id']
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ID={issue_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫–ª–∏–µ–Ω—Ç–∞
            if not client.get('contact') and not client.get('company'):
                logger.warning("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É")
            elif not client.get('contact'):
                logger.warning("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∫ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ –Ω–µ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É")
            elif not client.get('company'):
                logger.info("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É (–±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏)")
            else:
                logger.info("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –∏ –∫–æ–º–ø–∞–Ω–∏–∏")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {response}")
            
        return response if response else {}
    
    async def add_comment(self, issue_id: int, content: str, is_public: bool = True, 
                         author_id: int = None, author_type: str = None, 
                         author_name: str = None, client_phone: str = None, 
                         contact_auth_code: str = None, contact_id: int = None) -> Dict:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ
        
        Args:
            issue_id: ID –∑–∞—è–≤–∫–∏
            content: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è  
            is_public: –ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            author_id: ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            author_type: –¢–∏–ø –∞–≤—Ç–æ—Ä–∞ (contact, employee, client)
            author_name: –ò–º—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_auth_code: –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —á–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É)
        """
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω contact_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
        if contact_id:
            author_id = contact_id
            author_type = 'contact'
        
        data = {
            'content': content,
            'public': is_public,
        }
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if contact_auth_code:
            endpoint = f"/issues/{issue_id}/contact_comments"
            data['auth_code'] = contact_auth_code
            return await self._contact_comment(endpoint, data)
        
        endpoint = f"/issues/{issue_id}/comments"
        
        logger.info(f"=== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø ===")
        logger.info(f"issue_id: {issue_id}")
        logger.info(f"author_id: {author_id}")
        logger.info(f"author_type: {author_type}")
        logger.info(f"client_phone: {client_phone}")
        logger.info(f"contact_id: {contact_id}")
        logger.info(f"content: {content[:50]}...")
        
        # author_id –∏ author_type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
        if author_id and author_type:
            data['author_id'] = author_id
            data['author_type'] = author_type
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: author_id={author_id}, author_type={author_type}")
        else:
            logger.info(f"‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã author_id –∏/–∏–ª–∏ author_type - –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
            contact_id = None
            
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if client_phone:
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {client_phone}")
                contact = await self.find_contact_by_phone(client_phone)
                
                if contact and 'id' in contact:
                    contact_id = contact['id']
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ID={contact_id}")
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∑–∞—è–≤–∫–µ
            if not contact_id:
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {issue_id}")
                issue_info = await self.get_issue(issue_id)
                
                if issue_info and 'client' in issue_info and issue_info['client'].get('contact'):
                    contact_id = issue_info['client']['contact'].get('id')
                    if contact_id:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫—É: ID={contact_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                company_id = None
                if issue_info and 'client' in issue_info and issue_info['client'].get('company'):
                    company_id = issue_info['client']['company'].get('id')
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫—É: ID={company_id}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if not contact_id and client_phone:
                logger.info(f"‚ùó –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
                
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_data = {
                    'first_name': author_name.split()[0] if author_name else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'last_name': ' '.join(author_name.split()[1:]) if author_name and len(author_name.split()) > 1 else 'Telegram',
                    'phone': client_phone,
                    'comment': f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{issue_id}"
                }
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–µ–π
                if company_id:
                    contact_data['company_id'] = company_id
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                new_contact = await self.create_contact(**contact_data)
                
                if new_contact and 'id' in new_contact:
                    contact_id = new_contact['id']
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: ID={contact_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            if contact_id:
                data['author_id'] = contact_id
                data['author_type'] = 'contact'
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –∞–≤—Ç–æ—Ä–∞: author_id={contact_id}, author_type=contact")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                data['author_id'] = 5  # ID Manager –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
                data['author_type'] = 'employee'
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: author_id=5, author_type=employee")
        
        if author_name:
            data['author_name'] = author_name
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {data}")
        response = await self._make_request('POST', endpoint, data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API
        if response:
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç API: {response}")
            return response
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response}")
            return {}
    
    async def _contact_comment(self, endpoint: str, data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è auth_code)"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Content-Type': 'application/json'}
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
                logger.info(f"Endpoint: {endpoint}")
                logger.info(f"Data: {data}")
                
                async with session.post(
                    urljoin(self.api_url, endpoint),
                    headers=headers,
                    data=json.dumps(data)
                ) as resp:
                    response_text = await resp.text()
                    
                    if resp.status in [200, 201]:
                        try:
                            response = json.loads(response_text)
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {response}")
                            return response
                        except:
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–±–µ–∑ JSON –æ—Ç–≤–µ—Ç–∞)")
                            return {"success": True}
                    else:
                        logger.error(f"API Error {resp.status}: {response_text}")
                        return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return {}
    
    async def get_contacts(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            endpoint = f"/contacts?limit={limit}"
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            if isinstance(response, list):
                return response
            
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return []
    
    async def find_contact_by_phone(self, phone: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)"""
        if not phone:
            logger.warning("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            return None
            
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            clean_phone = ''.join(c for c in phone if c.isdigit())
            
            if len(clean_phone) < 5:
                logger.warning(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            formatted_phones = [phone]  # –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å + –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not phone.startswith('+'):
                formatted_phones.append(f"+{clean_phone}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
            if len(clean_phone) == 11 and clean_phone.startswith('8'):
                formatted_phones.append(f"+7{clean_phone[1:]}")
                formatted_phones.append(f"7{clean_phone[1:]}")
            elif len(clean_phone) == 11 and clean_phone.startswith('7'):
                formatted_phones.append(f"+{clean_phone}")
                formatted_phones.append(f"8{clean_phone[1:]}")
            elif len(clean_phone) == 10:  # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
                formatted_phones.append(f"+7{clean_phone}")
                formatted_phones.append(f"7{clean_phone}")
                formatted_phones.append(f"8{clean_phone}")
            
            logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {formatted_phones}")
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            for formatted_phone in formatted_phones:
                endpoint = f"/contacts?phone={formatted_phone}"
                logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {formatted_phone}")
                response = await self._make_request('GET', endpoint)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ id
            if response and isinstance(response, dict) and 'id' in response:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ API: {response.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {response.get('id')})")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ okdesk_contact_id
                try:
                    clean_search_phone = ''.join(c for c in phone if c.isdigit())
                    from services.database import DatabaseManager
                    db = DatabaseManager('okdesk_bot.db')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–∑ –±–∞–∑—ã –∏ –æ—á–∏—â–∞–µ–º –∏—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    users = db.execute("SELECT telegram_id, phone FROM users WHERE okdesk_contact_id IS NULL").fetchall()
                    for user_id, user_phone in users:
                        if user_phone:
                            clean_user_phone = ''.join(c for c in user_phone if c.isdigit())
                            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
                            if (len(clean_search_phone) >= 10 and len(clean_user_phone) >= 10 and
                                clean_search_phone[-10:] == clean_user_phone[-10:]):
                                # –û–±–Ω–æ–≤–ª—è–µ–º okdesk_contact_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                db.execute(
                                    "UPDATE users SET okdesk_contact_id = ? WHERE telegram_id = ?",
                                    (response['id'], user_id)
                                )
                                db.commit()
                                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω okdesk_contact_id={response['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
                    db.close()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ okdesk_contact_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                
                return response
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            # –í–∞—Ä–∏–∞–Ω—Ç —Å 7 –≤ –Ω–∞—á–∞–ª–µ
            if clean_phone.startswith('8') and len(clean_phone) == 11:
                alt_phone = '7' + clean_phone[1:]
                endpoint = f"/contacts?phone={alt_phone}"
                logger.info(f"üîç –ü–æ–∏—Å–∫ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {alt_phone}")
                response = await self._make_request('GET', endpoint)
                
                if response and isinstance(response, dict) and 'id' in response:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ API: {response.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {response.get('id')})")
                    return response
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)")
            endpoint = f"/contacts?limit=100"  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            response = await self._make_request('GET', endpoint)
            
            if response and isinstance(response, list):
                for contact in response:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
                    contact_phone = contact.get('phone', '')
                    contact_mobile = contact.get('mobile_phone', '')
                    
                    # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    clean_contact_phone = ''.join(c for c in contact_phone if c.isdigit())
                    clean_contact_mobile = ''.join(c for c in contact_mobile if c.isdigit())
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–∏—Ñ—Ä–∞–º (–µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª–∏–Ω–Ω—ã–π)
                    if len(clean_phone) >= 10 and len(clean_contact_phone) >= 10:
                        if clean_phone[-10:] == clean_contact_phone[-10:]:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                            return contact
                    
                    if len(clean_phone) >= 10 and len(clean_contact_mobile) >= 10:
                        if clean_phone[-10:] == clean_contact_mobile[-10:]:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                            return contact
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –¥—Ä—É–≥–æ–º
                    if clean_phone and (clean_phone in clean_contact_phone or clean_phone in clean_contact_mobile):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
                    
                    if clean_contact_phone and clean_contact_phone in clean_phone:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
                    
                    if clean_contact_mobile and clean_contact_mobile in clean_phone:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
            
            logger.info(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
            return None
    
    async def create_contact(self, first_name: str, last_name: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        data = {
            'first_name': first_name,
            'last_name': last_name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in ['phone', 'email', 'company_id', 'position', 'comment']:
            if field in kwargs and kwargs[field]:
                data[field] = kwargs[field]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ù–ù –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if 'inn_company' in kwargs and kwargs['inn_company']:
            inn = kwargs['inn_company']
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ö–∞–∫ custom_parameters
            if 'custom_parameters' not in data:
                data['custom_parameters'] = {}
            data['custom_parameters']['inn_company'] = inn
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ö–∞–∫ parameters (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
            if 'parameters' not in data:
                data['parameters'] = []
            
            data['parameters'].append({
                'code': 'inn_company',
                'name': '–ò–ù–ù',
                'value': inn
            })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            data['inn_company'] = inn
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', 'contacts', data)
        return response if response else {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def search_contact_by_phone(self, phone: str) -> Dict:
        """–ê–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ find_contact_by_phone –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.find_contact_by_phone(phone)
    
    async def create_company(self, name: str, inn: str = None, **kwargs) -> Dict:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            inn: –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (phone, email, etc)
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        data = {
            'name': name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ù–ù, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if inn and inn.strip():
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ –ò–ù–ù
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ö–∞–∫ custom_parameters
            if 'custom_parameters' not in data:
                data['custom_parameters'] = {}
            data['custom_parameters']['inn_company'] = inn.strip()
            data['custom_parameters']['–ò–ù–ù –ö–æ–º–ø–∞–Ω–∏–∏'] = inn.strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –í –∫–æ—Ä–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
            data['inn_company'] = inn.strip()
            data['–ò–ù–ù –ö–æ–º–ø–∞–Ω–∏–∏'] = inn.strip()
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ö–∞–∫ parameters (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
            if 'parameters' not in data:
                data['parameters'] = []
            
            data['parameters'].append({
                'code': 'inn_company',
                'name': '–ò–ù–ù –ö–æ–º–ø–∞–Ω–∏–∏',
                'value': inn.strip()
            })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
            data['parameters'].append({
                'code': 'INN',
                'name': '–ò–ù–ù',
                'value': inn.strip()
            })
            
            # –ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–ª—è inn
            data['inn'] = inn.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in ['phone', 'email', 'address', 'type_id', 'web_site', 'comment']:
            if field in kwargs and kwargs[field]:
                data[field] = kwargs[field]
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', 'companies', data)
        
        if response and 'id' in response:
            logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ID={response['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ={response.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –ò–ù–ù, –æ–±–Ω–æ–≤–∏–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if inn:
                try:
                    from services.database import DatabaseManager
                    db = DatabaseManager('okdesk_bot.db')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –ò–ù–ù, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∑–∞–¥–∞–Ω company_id
                    users = db.execute(
                        "SELECT telegram_id FROM users WHERE inn = ? AND company_id IS NULL", 
                        (inn,)
                    ).fetchall()
                    
                    for user_row in users:
                        user_id = user_row[0]
                        # –û–±–Ω–æ–≤–ª—è–µ–º company_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        db.execute(
                            "UPDATE users SET company_id = ? WHERE telegram_id = ?",
                            (response['id'], user_id)
                        )
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω company_id={response['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
                    db.commit()
                    db.close()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ company_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    
        return response if response else {}
    
    async def find_company_by_inn(self, inn: str, create_if_not_found: bool = False) -> Optional[Dict]:
        """
        –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Args:
            inn: –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            create_if_not_found: –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """""
        try:
            if not inn or not inn.strip():
                logger.warning("‚ùå –ò–ù–ù –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
                return None
            
            # –û—á–∏—â–∞–µ–º –ò–ù–ù –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_inn = ''.join(c for c in inn if c.isdigit())
            
            if not clean_inn:
                logger.warning(f"‚ùå –ò–ù–ù '{inn}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
                return None
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù: {clean_inn}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù
            logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ API –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É inn_company={clean_inn}...")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ inn_company –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π API
            companies = await self._make_request('GET', f"/companies/list?parameter[inn_company]={clean_inn}")
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            company = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            if isinstance(companies, list) and companies:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É inn_company={clean_inn}")
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –ò–ù–ù –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
                company = companies[0]
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
            else:
                logger.info(f"‚ùå –ö–æ–º–ø–∞–Ω–∏–∏ —Å inn_company={clean_inn} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API-–∑–∞–ø—Ä–æ—Å")
                
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
                logger.info("üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π...")
                
                companies = await self.get_companies(limit=1000)
                
                if isinstance(companies, list):
                    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    
                    for comp in companies:
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é ID: {comp.get('id')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {comp.get('name')}")
                        
                        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö
                        inn_values = [
                            str(comp.get('inn', '')).strip(),
                            str(comp.get('inn_company', '')).strip(),
                            str(comp.get('legal_inn', '')).strip()
                        ]
                        
                        if clean_inn in inn_values:
                            company = comp
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—é –ò–ù–ù: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                            break
                        
                        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                        if 'parameters' in comp:
                            found_in_params = False
                            for param in comp.get('parameters', []):
                                if param.get('code') in ['inn', 'INN', '–ò–ù–ù', 'inn_company', '0001'] and str(param.get('value', '')).strip() == clean_inn:
                                    company = comp
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É {param.get('code')}: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                                    found_in_params = True
                                    break
                            
                            if found_in_params:
                                break
                        
                        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ custom_parameters, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        if 'custom_parameters' in comp:
                            custom_params = comp.get('custom_parameters', {})
                            inn_fields = ['inn', 'INN', '–ò–ù–ù', 'inn_company']
                            
                            for field in inn_fields:
                                if field in custom_params and str(custom_params[field]).strip() == clean_inn:
                                    company = comp
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ custom_parameters.{field}: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é, –æ–±–Ω–æ–≤–∏–º —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if company:
                logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {company.get('id')})")
                
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è, –æ–±–Ω–æ–≤–∏–º –µ—ë ID –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –ò–ù–ù
                try:
                    from services.database import DatabaseManager
                    db = DatabaseManager('okdesk_bot.db')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º –ò–ù–ù, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –∑–∞–¥–∞–Ω company_id
                    users = db.execute(
                        "SELECT telegram_id FROM users WHERE inn_company = ? AND company_id IS NULL", 
                        (clean_inn,)
                    ).fetchall()
                    
                    for user_row in users:
                        user_id = user_row[0]
                        # –û–±–Ω–æ–≤–ª—è–µ–º company_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        db.execute(
                            "UPDATE users SET company_id = ? WHERE telegram_id = ?",
                            (company['id'], user_id)
                        )
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω company_id={company['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
                    db.commit()
                    db.close()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ company_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                
                return company
            
            logger.info(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
            
            # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ create_if_not_found, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
            if create_if_not_found:
                logger.info(f"üîç –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é.")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ù–ù
                company_name = f"–ò–ü/–û–û–û —Å –ò–ù–ù {inn}"
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
                new_company = await self.create_company(
                    name=company_name, 
                    inn=inn,
                    comment=f"–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram –±–æ—Ç–∞ –ø–æ –ò–ù–ù {inn}"
                )
                
                if new_company and 'id' in new_company:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {new_company.get('name')} (ID: {new_company['id']})")
                    return new_company
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Å –ò–ù–ù {inn}")
            
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ API: {e}")
            return None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def search_company_by_inn(self, inn: str) -> Optional[Dict]:
        """–ê–ª–∏–∞—Å –º–µ—Ç–æ–¥–∞ find_company_by_inn –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.find_company_by_inn(inn)
    
    async def get_companies(self, limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
        
        Args:
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–π
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (–ª–∏–º–∏—Ç: {limit})...")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
            all_companies_response = await self._make_request('GET', f"/companies?per_page={limit}")
            
            if not all_companies_response or not isinstance(all_companies_response, list):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ç–∏–ø–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            companies_with_details = []
            for company in all_companies_response:
                if 'id' in company:
                    company_id = company['id']
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                    company_details = await self._make_request('GET', f"/companies/{company_id}")
                    if company_details:
                        companies_with_details.append(company_details)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        companies_with_details.append(company)
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(companies_with_details)} –∫–æ–º–ø–∞–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
            return companies_with_details
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            return []
    
    async def create_comment(self, issue_id: int, content: str, contact_id: int = None, phone: str = None, 
                        is_public: bool = True, full_name: str = None, telegram_id: str = None) -> Dict:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π –∞–≤—Ç–æ—Ä–∞
        
        Args:
            issue_id: ID –∑–∞—è–≤–∫–∏
            content: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk (–∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ phone)
            phone: –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            is_public: –ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        author_id = None
        author_type = None
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω contact_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if contact_id:
            author_id = contact_id
            author_type = 'contact'
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π contact_id={contact_id} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        
        # –ï—Å–ª–∏ contact_id –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω, –∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        elif phone:
            contact = await self.find_contact_by_phone(phone)
            if contact and 'id' in contact:
                author_id = contact['id']
                author_type = 'contact'
                logger.info(f"‚úÖ –ù–∞—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: id={contact['id']}, name={contact.get('name')}")
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
                issue_info = await self.get_issue(issue_id)
                company_id = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ –∑–∞—è–≤–∫–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
                if issue_info and 'client' in issue_info and issue_info['client'].get('company'):
                    company_id = issue_info['client']['company'].get('id')
                    logger.info(f"‚úÖ –ù–∞—à–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {company_id}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                first_name = full_name.split()[0] if full_name and ' ' in full_name else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                last_name = ' '.join(full_name.split()[1:]) if full_name and len(full_name.split()) > 1 else 'Telegram'
                
                contact_data = {
                    'first_name': first_name,
                    'last_name': last_name,
                    'phone': phone,
                    'comment': f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ #{issue_id}. Telegram ID: {telegram_id}"
                }
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
                if company_id:
                    contact_data['company_id'] = company_id
                
                logger.info(f"üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: {contact_data}")
                new_contact = await self.create_contact(**contact_data)
                
                if new_contact and 'id' in new_contact:
                    author_id = new_contact['id']
                    author_type = 'contact'
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: id={new_contact['id']}, name={new_contact.get('name')}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {new_contact}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ add_comment —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return await self.add_comment(
            issue_id=issue_id,
            content=content,
            is_public=is_public,
            author_id=author_id,
            author_type=author_type,
            author_name=full_name,
            client_phone=phone if not contact_id else None
        )
    
    async def close(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å
        pass
