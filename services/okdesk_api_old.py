import aiohttp
import json
from typing import Optional, Dict, Any
import config

class OkdeskAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Okdesk"""
    
    def __init__(self):
        self.base_url = config.OKDESK_API_URL
        self.token = config.OKDESK_API_TOKEN
        self.session = None
        
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        return aiohttp.ClientSession(
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        )
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ API Okdesk"""
        if not self.session:
            self.session = await self._get_session()
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å API —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        if '?' in endpoint:
            url = f"{self.base_url}{endpoint}&api_token={self.token}"
        else:
            url = f"{self.base_url}{endpoint}?api_token={self.token}"
        
        print(f"üîó {method} {url}")
        
        try:
            request_kwargs = {}
            if data and method in ['POST', 'PUT', 'PATCH']:
                request_kwargs['json'] = data
            
            async with self.session.request(method, url, **request_kwargs) as response:
                response_text = await response.text()
                print(f"üìä Response status: {response.status}")
                print(f"üìÑ Response: {response_text[:200]}...")
                
                if response.status in [200, 201]:
                    try:
                        return await response.json()
                    except:
                        return {"success": True, "text": response_text}
                else:
                    print(f"‚ùå API Error {response.status}: {response_text}")
                    return None
                            
        except Exception as e:
            print(f"‚ùå Request error for {method} {endpoint}: {e}")
            return None
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Okdesk"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            response = await self._make_request("GET", "/companies", {"limit": 1})
            if response is not None:
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Okdesk API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Okdesk API")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False
    
    async def find_company_by_inn(self, inn: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù"""
        endpoint = config.OKDESK_ENDPOINTS["companies"]
        params = {"search": inn}
        
        response = await self._make_request("GET", endpoint, params)
        if response and "companies" in response:
            for company in response["companies"]:
                # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ò–ù–ù –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                if (company.get("inn") == inn or 
                    company.get("legal_inn") == inn or
                    inn in str(company.get("name", ""))):
                    return company
        return None
    
    async def create_issue(self, title: str, description: str, user_data: Dict) -> Optional[Dict]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ Okdesk"""
        endpoint = config.OKDESK_ENDPOINTS["issues"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        issue_data = {
            "title": title,
            "description": description,
            "priority": "normal",
            "type": "task"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_data.get("user_type") == "physical":
            # –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
            issue_data["contact"] = {
                "name": user_data.get("full_name"),
                "phone": user_data.get("phone")
            }
        elif user_data.get("user_type") == "legal":
            # –î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
            if user_data.get("company_id"):
                issue_data["company_id"] = user_data["company_id"]
        
        response = await self._make_request("POST", endpoint, issue_data)
        return response
    
    async def get_issue(self, issue_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
        endpoint = f"{config.OKDESK_ENDPOINTS['issues']}/{issue_id}"
        return await self._make_request("GET", endpoint)
    
    async def add_comment_to_issue(self, issue_id: int, content: str, is_public: bool = True) -> Optional[Dict]:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ"""
        endpoint = config.OKDESK_ENDPOINTS["comments"].format(issue_id=issue_id)
        
        comment_data = {
            "content": content,
            "public": is_public
        }
        
        return await self._make_request("POST", endpoint, comment_data)
    
    async def get_issue_comments(self, issue_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ"""
        endpoint = config.OKDESK_ENDPOINTS["comments"].format(issue_id=issue_id)
        return await self._make_request("GET", endpoint)
    
    async def create_equipment(self, equipment_data: Dict) -> Optional[Dict]:
        """–°–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"""
        endpoint = config.OKDESK_ENDPOINTS["equipments"]
        return await self._make_request("POST", endpoint, equipment_data)
