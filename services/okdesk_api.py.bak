"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Okdesk API - –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –≤ URL
"""
import aiohttp
import asyncio
import logging
from typing import Dict, List, Optional
import config

logger = logging.getLogger(__name__)

class OkdeskAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Okdesk"""
    
    def __init__(self):
        self.base_url = config.OKDESK_API_URL
        self.token = config.OKDESK_API_TOKEN
        self.session = None
        
    async def __aenter__(self):
        self.session = await self._get_session()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        return aiohttp.ClientSession(
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        )
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None, headers: Dict = None, params: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        if not self.session:
            self.session = await self._get_session()
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å —Ç–æ–∫–µ–Ω–æ–º –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        if self.base_url.endswith('/api/v1'):
            url = f"{self.base_url}{endpoint}"
        else:
            url = f"{self.base_url}/api/v1{endpoint}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º API —Ç–æ–∫–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if '?' in endpoint:
            url += f"&api_token={self.token}"
        else:
            url += f"?api_token={self.token}"
            
        logger.info(f"{method} {url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if data:
            logger.info(f"Request data: {data}")
            
        try:
            async with self.session.request(method, url, json=data) as response:
                response_text = await response.text()
                logger.info(f"Response status: {response.status}")
                logger.info(f"Response: {response_text[:500]}")
                
                if response.status in [200, 201]:
                    try:
                        result = await response.json()
                        logger.info(f"Parsed response: {str(result)[:200]}...")
                        return result
                    except Exception as parse_error:
                        logger.error(f"Error parsing JSON: {parse_error}")
                        return {"success": True, "text": response_text}
                else:
                    error_msg = f"API Error {response.status}: {response_text}"
                    logger.error(error_msg)
                    # –î–ª—è –æ—à–∏–±–æ–∫ 4xx –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç
                    if 400 <= response.status < 500:
                        try:
                            error_json = await response.json()
                            logger.error(f"Error details: {error_json}")
                            return error_json
                        except:
                            pass
                    return None
        except Exception as e:
            logger.error(f"API Error: {e}")
            return None
    
    async def get_issues(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä—É—á–Ω—É—é
            endpoint = f"/issues?limit={limit}"
            
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            if isinstance(response, dict):
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ data —Å –º–∞—Å—Å–∏–≤–æ–º
                if 'data' in response:
                    return response['data']
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ issues —Å –º–∞—Å—Å–∏–≤–æ–º  
                elif 'issues' in response:
                    return response['issues']
                # –ï—Å–ª–∏ —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–∫–∏
                elif 'id' in response:
                    return [response]
            elif isinstance(response, list):
                return response
                
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    async def get_issue(self, issue_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID"""
        response = await self._make_request('GET', f'/issues/{issue_id}')
        return response if response else {}
    
    async def create_issue(self, title: str, description: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        data = {
            'title': title,
            'description': description,
            'type_id': kwargs.get('type_id', 1),  # –¢–∏–ø –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'priority_id': kwargs.get('priority_id', 2),  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'status_id': kwargs.get('status_id', 1),  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É API Okdesk
        client = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if 'contact_id' in kwargs and kwargs['contact_id']:
            client['contact'] = {'id': kwargs['contact_id']}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if 'company_id' in kwargs and kwargs['company_id']:
            client['company'] = {'id': kwargs['company_id']}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è
        if client:
            data['client'] = client
            logger.info(f"‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ: {client}")
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if 'contact_id' in kwargs:
            data['contact_id'] = kwargs['contact_id']
        if 'company_id' in kwargs:
            data['company_id'] = kwargs['company_id']
        if 'assignee_id' in kwargs:
            data['assignee_id'] = kwargs['assignee_id']
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', '/issues', data)
        return response if response else {}
    
    async def add_comment(self, issue_id: int, content: str, is_public: bool = True, 
                         author_id: int = None, author_type: str = None, 
                         author_name: str = None, client_phone: str = None, 
                         contact_auth_code: str = None, contact_id: int = None) -> Dict:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ
        
        Args:
            issue_id: ID –∑–∞—è–≤–∫–∏
            content: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è  
            is_public: –ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            author_id: ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            author_type: –¢–∏–ø –∞–≤—Ç–æ—Ä–∞ ('contact' –∏–ª–∏ 'employee')
            author_name: –ò–º—è –∞–≤—Ç–æ—Ä–∞ (–¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ author_id + author_type)
        """
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –µ–≥–æ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        if contact_auth_code:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            auth_response = await self.add_comment_as_contact(issue_id, content, contact_auth_code)
            if auth_response and ('id' in auth_response or auth_response.get('success')):
                logger.info("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return auth_response
            logger.info("–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        data = {
            'content': content,
            'public': is_public
        }
        
        logger.info(f"=== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø ===")
        logger.info(f"issue_id: {issue_id}")
        logger.info(f"author_id: {author_id}")
        logger.info(f"author_type: {author_type}")
        logger.info(f"content: {content[:50]}...")
        
        # author_id –∏ author_type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
        if author_id and author_type:
            data['author_id'] = author_id
            data['author_type'] = author_type
        else:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: author_id={author_id}, author_type={author_type}")
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω client_phone
            if client_phone:
                logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {client_phone}")
                contact = await self.find_contact_by_phone(client_phone)
                if contact and 'id' in contact:
                    data['author_id'] = contact['id']
                    data['author_type'] = 'contact'
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: author_id={contact['id']}, author_type=contact")
                else:
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    data['author_id'] = 5  # ID Manager
                    data['author_type'] = 'employee'
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: author_id=5, author_type=employee")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ fallback
                data['author_id'] = 5  # ID Manager –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
                data['author_type'] = 'employee'
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: author_id=5, author_type=employee")
        
        logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data}")
        response = await self._make_request('POST', f'/issues/{issue_id}/comments', data)
        
        if response and 'id' in response:
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω (ID: {response['id']})")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response}")
        
        return response if response else {}
    
    async def add_comment_as_contact(self, issue_id: int, content: str, contact_auth_code: str = None) -> Dict:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not contact_auth_code:
            return {}
            
        try:
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è endpoint –±–µ–∑ api_token
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            if '?' in self.base_url:
                base_url_clean = self.base_url.split('?')[0]
            else:
                base_url_clean = self.base_url
            
            comment_url = f"{base_url_clean}/issues/{issue_id}/comments"
            
            data = {
                'content': content,
                'public': True,
                'contact_auth_code': contact_auth_code
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            logger.info(f"URL: {comment_url}")
            
            if not self.session:
                self.session = await self._get_session()
            
            async with self.session.post(comment_url, json=data) as resp:
                logger.info(f"Response status: {resp.status}")
                response_text = await resp.text()
                logger.info(f"Response: {response_text}")
                
                if resp.status in [200, 201]:
                    if response_text:
                        try:
                            result = await resp.json()
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: ID {result.get('id')}")
                            return result
                        except:
                            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–±–µ–∑ JSON –æ—Ç–≤–µ—Ç–∞)")
                            return {"success": True}
                    return {"success": True}
                else:
                    logger.error(f"API Error {resp.status}: {response_text}")
                    return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return {}
    
    async def get_contacts(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            endpoint = f"/contacts?limit={limit}"
            response = await self._make_request('GET', endpoint)
            
            if not response:
                return []
            
            if isinstance(response, list):
                return response
            elif isinstance(response, dict) and 'data' in response:
                return response['data']
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return []
    
    async def search_contact_by_phone(self, phone: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π)"""
        try:
            contacts = await self.get_contacts(100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            for contact in contacts:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã (—É–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
                contact_phone = contact.get('phone', '').replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
                search_phone = phone.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
                if contact_phone == search_phone:
                    logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                    return contact
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
            
    async def find_contact_by_phone(self, phone: str) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)"""
        try:
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫!)
            endpoint = f"/contacts?phone={phone}"
            logger.info(f"üîç –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")
            response = await self._make_request('GET', endpoint)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ id
            if response and isinstance(response, dict) and 'id' in response:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ API: {response.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {response.get('id')})")
                return response
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)")
            endpoint = f"/contacts?limit=50"  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            response = await self._make_request('GET', endpoint)
            
            if response and isinstance(response, list):
                for contact in response:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
                    contact_phone = contact.get('phone', '')
                    contact_mobile = contact.get('mobile_phone', '')
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–∏—Ä–µ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    clean_phone = ''.join(c for c in phone if c.isdigit())
                    clean_contact_phone = ''.join(c for c in contact_phone if c.isdigit())
                    clean_contact_mobile = ''.join(c for c in contact_mobile if c.isdigit())
                    
                    if clean_phone and (clean_phone in clean_contact_phone or clean_phone in clean_contact_mobile):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {contact.get('id')})")
                        return contact
            
            logger.info(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
            return None
    
    async def create_contact(self, first_name: str, last_name: str, **kwargs) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        data = {
            'first_name': first_name,
            'last_name': last_name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in ['phone', 'email', 'company_id', 'position', 'comment']:
            if field in kwargs and kwargs[field]:
                data[field] = kwargs[field]
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        response = await self._make_request('POST', '/contacts', data)
        return response if response else {}

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)
            response = await self._make_request('GET', '/issues?limit=1')
            if response is not None:
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Okdesk API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Okdesk API")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False
