#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import sys
import os
import logging
import time
from datetime import datetime
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.okdesk_api import OkdeskAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

async def quick_check_fixes():
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –∑–∞—è–≤–∫—É, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—è–∑–æ–∫.
    """
    
    logger.info("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
    api = OkdeskAPI()
    
    try:
        timestamp = int(time.time())
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        logger.info("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        
        phone = f"+7999{timestamp % 10000000}"
        contact_data = {
            "first_name": "–ë—ã—Å—Ç—Ä—ã–π",
            "last_name": f"–¢–µ—Å—Ç{timestamp}",
            "phone": phone,
            "comment": f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (timestamp: {timestamp})"
        }
        
        contact = await api.create_contact(**contact_data)
        
        if not contact or 'id' not in contact:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {contact}")
            return False
            
        contact_id = contact['id']
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: ID={contact_id}, –ò–º—è={contact.get('name')}")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ ID
        logger.info("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ ID")
        
        issue_data = {
            "title": f"–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π {timestamp}",
            "description": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (timestamp: {timestamp})",
            "contact_id": contact_id,
            "telegram_id": f"test{timestamp}"
        }
        
        issue = await api.create_issue(**issue_data)
        
        if not issue or 'id' not in issue:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {issue}")
            return False
            
        issue_id = issue['id']
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={issue_id}")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Okdesk
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (3 —Å–µ–∫—É–Ω–¥—ã)...")
        await asyncio.sleep(3)
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ
        logger.info("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∑–∞—è–≤–∫–µ")
        
        issue_details = await api.get_issue(issue_id)
        
        if issue_details and 'contact' in issue_details and issue_details['contact']:
            contact_info = issue_details.get('contact')
            if contact_info.get('id') == contact_id:
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–∫–µ")
                client_binding_status = True
            else:
                logger.error(f"‚ùå –ö –∑–∞—è–≤–∫–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {contact_info}")
                logger.error(f"   –û–∂–∏–¥–∞–ª—Å—è ID: {contact_id}, –ü–æ–ª—É—á–µ–Ω: {contact_info.get('id')}")
                client_binding_status = False
        else:
            logger.error(f"‚ùå –ö –∑–∞—è–≤–∫–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–ª–∏–µ–Ω—Ç")
            client_binding_status = False
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º
        logger.info("4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º")
        
        comment_text = f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–≤—Ç–æ—Ä–∞ (timestamp: {timestamp})"
        comment = await api.create_comment(
            issue_id=issue_id,
            content=comment_text,
            contact_id=contact_id
        )
        
        if not comment or 'id' not in comment:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            return False
            
        comment_id = comment['id']
        logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω: ID={comment_id}")
        
        # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Okdesk
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (3 —Å–µ–∫—É–Ω–¥—ã)...")
        await asyncio.sleep(3)
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        logger.info("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞—è–≤–∫–∏
        comments = await api.get_issue_comments(issue_id)
        
        if not comments:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞—è–≤–∫–∏")
            return False
            
        # –ò—â–µ–º –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comment_author_status = False
        for comment in comments:
            if comment.get('id') == comment_id:
                author = comment.get('author')
                
                if author:
                    author_id = author.get('id')
                    author_name = author.get('name')
                    
                    if author_id == contact_id:
                        logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞: {author_name}")
                        comment_author_status = True
                    else:
                        logger.error(f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞: {author_name}")
                        logger.error(f"   –û–∂–∏–¥–∞–ª—Å—è ID: {contact_id}, –ü–æ–ª—É—á–µ–Ω: {author_id}")
                else:
                    logger.error(f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–º–µ–µ—Ç –∞–≤—Ç–æ—Ä–∞")
                break
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info("\nüèÅ –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
        
        if client_binding_status:
            logger.info("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –∑–∞—è–≤–∫–∞–º: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            logger.info("‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –∑–∞—è–≤–∫–∞–º: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            
        if comment_author_status:
            logger.info("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            logger.info("‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            
        logger.info(f"\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        logger.info(f"   –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"   –ö–æ–Ω—Ç–∞–∫—Ç: ID={contact_id}, –ò–º—è={contact.get('name')}")
        logger.info(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
        logger.info(f"   –ó–∞—è–≤–∫–∞: ID={issue_id}")
        logger.info(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ID={comment_id}")
        
        return client_binding_status and comment_author_status
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        await api.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞ Okdesk')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger('services.okdesk_api').setLevel(logging.DEBUG)
        
    result = asyncio.run(quick_check_fixes())
    sys.exit(0 if result else 1)
