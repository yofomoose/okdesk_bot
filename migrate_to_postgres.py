#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_to_postgres.py
"""

import os
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models.database import Base, User, Issue, Comment

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
SQLITE_DB_PATH = "okdesk_bot.db"  # –õ–æ–∫–∞–ª—å–Ω—ã–π SQLite —Ñ–∞–π–ª
POSTGRES_URL = os.getenv("DATABASE_URL", "postgresql://okdesk_user:changeme123@localhost:5432/okdesk_bot")

def migrate_data():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL"""

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SQLite —Ñ–∞–π–ª–∞
    if not os.path.exists(SQLITE_DB_PATH):
        print(f"‚ùå SQLite —Ñ–∞–π–ª {SQLITE_DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–∫–∏ –¥–ª—è –æ–±–µ–∏—Ö –±–∞–∑
    sqlite_engine = create_engine(f"sqlite:///{SQLITE_DB_PATH}", echo=False)
    postgres_engine = create_engine(POSTGRES_URL, echo=False)

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏
    SQLiteSession = sessionmaker(bind=sqlite_engine)
    PostgresSession = sessionmaker(bind=postgres_engine)

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
        print("üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...")
        Base.metadata.create_all(bind=postgres_engine, checkfirst=True)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
        sqlite_session = SQLiteSession()

        print("üìñ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite...")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = sqlite_session.query(User).all()
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        postgres_session = PostgresSession()
        for user in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing = postgres_session.query(User).filter(User.telegram_id == user.telegram_id).first()
            if not existing:
                postgres_session.merge(user)  # merge –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∏
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        postgres_session.commit()

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
        issues = sqlite_session.query(Issue).all()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(issues)} –∑–∞—è–≤–æ–∫")

        for issue in issues:
            postgres_session.merge(issue)

        postgres_session.commit()

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments = sqlite_session.query(Comment).all()
        print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

        for comment in comments:
            postgres_session.merge(comment)

        postgres_session.commit()

        sqlite_session.close()
        postgres_session.close()

        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = migrate_data()
    sys.exit(0 if success else 1)