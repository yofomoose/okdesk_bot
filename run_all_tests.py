#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import sys
import os
import logging
import time
from datetime import datetime
import argparse
import importlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
TESTS = [
    "test_client_binding_fixed",
    "test_comment_with_author",
    "quick_check_fixes"
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
DIAGNOSTIC_TOOLS = [
    "full_workflow_diagnosis",
    "fix_verification_report"
]

async def run_tests(tests, verbose=False):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    
    Args:
        tests: —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –º–æ–¥—É–ª–µ–π —Å —Ç–µ—Å—Ç–∞–º–∏
        verbose: –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    results = {}
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {len(tests)} —Ç–µ—Å—Ç–æ–≤")
    
    start_time = time.time()
    
    for test_name in tests:
        logger.info(f"\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å —Ç–µ—Å—Ç–æ–º
            test_module = importlib.import_module(test_name)
            
            # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if hasattr(test_module, 'main'):
                test_func = test_module.main
            else:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç —Ç–æ –∂–µ –∏–º—è, —á—Ç–æ –∏ –º–æ–¥—É–ª—å
                test_func_name = test_name
                if test_func_name.startswith("test_"):
                    test_func_name = test_func_name[5:]
                
                test_func = getattr(test_module, test_func_name)
            
            # –ï—Å–ª–∏ verbose –≤–∫–ª—é—á–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if verbose:
                logging.getLogger('services.okdesk_api').setLevel(logging.DEBUG)
            else:
                # –í—Ä–µ–º–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
                original_level = logger.level
                logger.setLevel(logging.WARNING)
                for handler in logging.root.handlers:
                    handler.setLevel(logging.WARNING)
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            test_start_time = time.time()
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if not verbose:
                logger.setLevel(original_level)
                for handler in logging.root.handlers:
                    handler.setLevel(original_level)
                
            test_end_time = time.time()
            test_duration = test_end_time - test_start_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(result, bool):
                success = result
                details = None
            elif isinstance(result, dict):
                success = result.get('success', False)
                details = result
            else:
                success = bool(result)
                details = None
                
            results[test_name] = {
                "success": success,
                "duration": test_duration,
                "details": details
            }
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success:
                logger.info(f"‚úÖ –¢–µ—Å—Ç {test_name} –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ ({test_duration:.2f} —Å–µ–∫)")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç {test_name} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω ({test_duration:.2f} —Å–µ–∫)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ {test_name}: {e}")
            import traceback
            traceback.print_exc()
            
            results[test_name] = {
                "success": False,
                "error": str(e),
                "duration": 0
            }
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    end_time = time.time()
    total_duration = end_time - start_time
    
    success_count = sum(1 for result in results.values() if result["success"])
    fail_count = len(results) - success_count
    
    logger.info(f"\nüèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
    logger.info(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {fail_count}")
    logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
    logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    for test_name, result in results.items():
        status = "‚úÖ" if result["success"] else "‚ùå"
        logger.info(f"   {status} {test_name}: {result['duration']:.2f} —Å–µ–∫")
        if not result["success"] and "error" in result:
            logger.info(f"      –û—à–∏–±–∫–∞: {result['error']}")
    
    return {
        "success": fail_count == 0,
        "tests": results,
        "total_tests": len(results),
        "success_count": success_count,
        "fail_count": fail_count,
        "duration": total_duration
    }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞ Okdesk')
    parser.add_argument('--all', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    parser.add_argument('--diagnostic', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    parser.add_argument('--verbose', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--tests', nargs='+', help='–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    tests_to_run = []
    
    if args.tests:
        tests_to_run = args.tests
    elif args.diagnostic:
        tests_to_run = DIAGNOSTIC_TOOLS
    elif args.all:
        tests_to_run = TESTS + DIAGNOSTIC_TOOLS
    else:
        tests_to_run = TESTS
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await run_tests(tests_to_run, args.verbose)

if __name__ == "__main__":
    asyncio.run(main())
