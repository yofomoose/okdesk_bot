from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.crud import UserService, IssueService
from services.okdesk_api import OkdeskAPI
from utils.helpers import validate_phone, normalize_phone, validate_inn
import config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

def truncate_message(text: str, max_length: int = 4000) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª"""
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å –∑–∞–ø–∞—Å–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ
    truncated = text[:max_length - 3] + "..."
    return truncated

async def get_available_service_objects(okdesk_api: OkdeskAPI, company_id: int) -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API –º–µ—Ç–æ–¥ get_maintenance_entities_for_company.
    """
    try:
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ID={company_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        service_objects = await okdesk_api.get_maintenance_entities_for_company(company_id)
        
        if service_objects:
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(service_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏")
            return service_objects
        
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
        return []
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
        return []

def is_user_registered(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
    if not user:
        return False
    
    if user.user_type == "physical" and user.full_name and user.phone:
        return True
    elif user.user_type == "legal" and user.inn_company:
        return True
    
    return False

class RegistrationStates(StatesGroup):
    waiting_for_user_type = State()
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_inn = State()
    waiting_for_branch = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    
    if is_user_registered(user):
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {get_user_type_text(user.user_type)}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
        )
    else:
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserService.create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="register_physical")],
            [InlineKeyboardButton(text="üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="register_legal")]
        ])
        
        await message.answer(
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
        await state.set_state(RegistrationStates.waiting_for_user_type)

@router.callback_query(F.data == "register_physical", StateFilter(RegistrationStates.waiting_for_user_type))
async def register_physical(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"""
    await state.update_data(user_type="physical")
    await callback.message.edit_text(
        "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):"
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)

@router.callback_query(F.data == "register_legal", StateFilter(RegistrationStates.waiting_for_user_type))
async def register_legal(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"""
    await state.update_data(user_type="legal")
    await callback.message.edit_text(
        "üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏):"
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)

@router.message(StateFilter(RegistrationStates.waiting_for_full_name))
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    await state.update_data(full_name=message.text)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)"
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    normalized_phone = normalize_phone(phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_type = data.get("user_type")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=normalized_phone)
    
    if user_type == "physical":
        # –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        user = UserService.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user = UserService.update_user_physical(
                user_id=user.id,
                full_name=data["full_name"],
                phone=normalized_phone
            )
            
            if updated_user:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ—Ä—Ç–∞–ª—É
                try:
                    okdesk_api = OkdeskAPI()
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –§–ò–û: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
                    name_parts = updated_user.full_name.split(' ')
                    if len(name_parts) >= 2:
                        last_name = name_parts[0]  # –§–∞–º–∏–ª–∏—è
                        first_name = name_parts[1]  # –ò–º—è
                        patronymic = name_parts[2] if len(name_parts) > 2 else ""  # –û—Ç—á–µ—Å—Ç–≤–æ
                    else:
                        first_name = updated_user.full_name
                        last_name = "–ö–ª–∏–µ–Ω—Ç"
                        patronymic = ""
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ—Ä—Ç–∞–ª—É
                    contact_response = await okdesk_api.create_contact_with_portal_access(
                        first_name=first_name,
                        last_name=last_name,
                        patronymic=patronymic,
                        phone=updated_user.phone,
                        telegram_username=message.from_user.username,
                        comment=f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram –±–æ—Ç–∞ (ID: {message.from_user.id})",
                        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–ª—É
                        access_level=[
                            'company_issues',  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
                            'allow_close_company_issues'  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
                        ]
                    )
                    await okdesk_api.close()
                    
                    if contact_response and 'id' in contact_response:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ –∫ –ø–æ—Ä—Ç–∞–ª—É
                        contact_id = contact_response['id']
                        auth_code = contact_response.get('authentication_code')
                        portal_login = contact_response.get('portal_login')
                        portal_password = contact_response.get('portal_password')
                        
                        UserService.update_user_contact_info(
                            user_id=updated_user.id,
                            contact_id=contact_id,
                            auth_code=auth_code
                        )
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        contact_info = f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})"
                        
                        if auth_code:
                            contact_info += f"\nüîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_code}"
                        
                        if portal_login and portal_password:
                            if portal_password == "USE_EXISTING_PASSWORD":
                                contact_info += f"\nüîó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É"
                                contact_info += f"\nüåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª: {config.OKDESK_PORTAL_URL}"
                            else:
                                contact_info += f"\nüë§ –õ–æ–≥–∏–Ω –ø–æ—Ä—Ç–∞–ª–∞: {portal_login}"
                                contact_info += f"\nüîë –ü–∞—Ä–æ–ª—å –ø–æ—Ä—Ç–∞–ª–∞: {portal_password}"
                                contact_info += f"\nüåê –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª: {config.OKDESK_PORTAL_URL}"
                        else:
                            contact_info += "\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ—Ä—Ç–∞–ª –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ"
                    elif contact_response and contact_response.get('error') == 422:
                        # –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        contact_info = "\n‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º Telegram username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Okdesk"
                        contact_info += "\nüîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É"
                        contact_info += f"\nüåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª: {config.OKDESK_PORTAL_URL}"
                    else:
                        contact_info = "\n‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å"
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk: {e}")
                    contact_info = "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")],
                    [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                ])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –§–ò–û: {updated_user.full_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {updated_user.phone}"
                    f"{contact_info}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if len(message_text) > 4000:
                    contact_info_short = "\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω"
                    message_text = (
                        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"üë§ –§–ò–û: {updated_user.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {updated_user.phone}"
                        f"{contact_info_short}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:"
                    )
                
                await message.answer(message_text, reply_markup=keyboard)
                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
    elif user_type == "legal":
        # –î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ò–ù–ù
        await message.answer(
            "üè¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:"
        )
        await state.set_state(RegistrationStates.waiting_for_inn)

@router.message(StateFilter(RegistrationStates.waiting_for_inn))
async def process_inn(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ù–ù, –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    """
    inn = message.text.strip() if message.text else None
    
    if not inn or not inn.isdigit() or len(inn) not in [10, 12]:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.\n"
            "–ò–ù–ù —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä.\n"
            "–ò–ù–ù –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:"
        )
        return
    
    okdesk_api = OkdeskAPI()
    
    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = UserService.get_user_by_telegram_id(message.from_user.id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        await message.answer(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ò–ù–ù {inn} –∏ –∏—â—É –∫–æ–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ Okdesk...")
        
        # –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ò–ù–ù –≤ Okdesk
        company = await okdesk_api.find_company_by_inn(inn, create_if_not_found=False)
        
        if company and 'id' in company:
            # –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞
            company_id = company['id']
            company_name = company.get('name', f"–ö–æ–º–ø–∞–Ω–∏—è (–ò–ù–ù: {inn})")
            
            await message.answer(
                f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company_name}\n"
                "üè¢ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ñ–∏–ª–∏–∞–ª/–æ—Ç–¥–µ–ª):"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            await state.update_data(
                company_id=company_id,
                company_name=company_name,
                inn=inn
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            service_objects = await get_available_service_objects(okdesk_api, company_id)
            
            if service_objects:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                for obj in service_objects[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –æ–±—ä–µ–∫—Ç–æ–≤
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                    address = obj.get('address', obj.get('name', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'))
                    
                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–∏–º—É—é —á–∞—Å—Ç—å
                    if len(address) > 45:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ª–∏—Ü—É –∏ –¥–æ–º –≤ –∞–¥—Ä–µ—Å–µ
                        parts = address.split(', ')
                        if len(parts) >= 3:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ (—É–ª–∏—Ü–∞, –¥–æ–º)
                            street_parts = parts[-2:]
                            display_text = ', '.join(street_parts)
                            if len(display_text) > 45:
                                display_text = display_text[:42] + "..."
                        else:
                            display_text = address[:42] + "..."
                    else:
                        display_text = address
                    
                    keyboard.inline_keyboard.append([
                        InlineKeyboardButton(
                            text=f"üìç {display_text}",
                            callback_data=f"select_branch_{obj['id']}"
                        )
                    ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é",
                        callback_data="enter_branch_manual"
                    )
                ])
                
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:",
                    reply_markup=keyboard
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                await state.set_state(RegistrationStates.waiting_for_branch)
            else:
                # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
                await message.answer(
                    "–û–±—ä–µ–∫—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ñ–∏–ª–∏–∞–ª–∞/–æ—Ç–¥–µ–ª–∞):"
                )
                await state.set_state(RegistrationStates.waiting_for_branch)
        else:
            # –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            await message.answer(
                f"‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ñ–∏–ª–∏–∞–ª–∞/–æ—Ç–¥–µ–ª–∞):"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.update_data(
                company_id=None,
                company_name=None,
                inn=inn
            )
            await state.set_state(RegistrationStates.waiting_for_branch)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ù–ù: {e}")
        import traceback
        traceback.print_exc()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ù–ù: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        if len(error_message) > 4000:
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ù–ù.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        await message.answer(error_message)
    
    finally:
        await okdesk_api.close()

@router.callback_query(F.data.startswith("select_branch_"), StateFilter(RegistrationStates.waiting_for_branch))
async def process_branch_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
    branch_id = int(callback.data.replace("select_branch_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    company_id = data.get("company_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID
    branch_name = await get_service_object_name_by_id(callback, branch_id, company_id)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {branch_name}\n"
        "üîó –ó–∞–≤–µ—Ä—à–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é..."
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    await finalize_legal_registration(callback, state, branch_name)

@router.callback_query(F.data == "enter_branch_manual", StateFilter(RegistrationStates.waiting_for_branch))
async def enter_branch_manual(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ñ–∏–ª–∏–∞–ª–∞/–æ—Ç–¥–µ–ª–∞):"
    )
    await state.set_state(RegistrationStates.waiting_for_branch)

@router.message(StateFilter(RegistrationStates.waiting_for_branch))
async def process_manual_branch_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    branch_name = message.text.strip()
    
    if not branch_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    await message.answer(
        f"‚úÖ –û–±—ä–µ–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {branch_name}\n"
        "üîó –ó–∞–≤–µ—Ä—à–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é..."
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    await finalize_legal_registration(message, state, branch_name)

async def finalize_legal_registration(message_or_callback, state: FSMContext, service_object_name: str):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user = UserService.get_user_by_telegram_id(message_or_callback.from_user.id)
    
    if not user:
        error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.answer()
            await message_or_callback.bot.send_message(
                chat_id=message_or_callback.message.chat.id,
                text=error_msg
            )
        else:
            await message_or_callback.answer(error_msg)
        await state.clear()
        return
    
    company_id = data.get("company_id")
    company_name = data.get("company_name", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
    inn = data.get("inn")
    full_name = data.get("full_name")
    phone = data.get("phone")
    
    okdesk_api = OkdeskAPI()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        updated_user = UserService.update_user_legal(
            user_id=user.id,
            inn_company=inn,
            company_id=company_id,
            company_name=company_name,
            service_object_name=service_object_name
        )
        
        if updated_user:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞)
            try:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –§–ò–û: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
                name_parts = full_name.split(' ')
                if len(name_parts) >= 2:
                    last_name = name_parts[0]  # –§–∞–º–∏–ª–∏—è
                    first_name = name_parts[1]  # –ò–º—è
                    patronymic = name_parts[2] if len(name_parts) > 2 else ""  # –û—Ç—á–µ—Å—Ç–≤–æ
                else:
                    first_name = full_name
                    last_name = "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å"
                    patronymic = ""
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ—Ä—Ç–∞–ª—É
                contact_response = await okdesk_api.create_contact_with_portal_access(
                    first_name=first_name,
                    last_name=last_name,
                    patronymic=patronymic,
                    phone=phone,
                    company_id=company_id,
                    position="–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",
                    telegram_username=message_or_callback.from_user.username,
                    inn_company=inn,
                    comment=f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –∫–æ–º–ø–∞–Ω–∏–∏. –ò–ù–ù: {inn}. –û–±—ä–µ–∫—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {service_object_name}. –°–æ–∑–¥–∞–Ω –∏–∑ Telegram –±–æ—Ç–∞ (ID: {message_or_callback.from_user.id})",
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–ª—É
                    access_level=[
                        'company_issues',  # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
                        'allow_close_company_issues'  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
                    ]
                )
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_info = ""
                if contact_response and 'id' in contact_response:
                    contact_id = contact_response['id']
                    auth_code = contact_response.get('authentication_code')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    UserService.update_user_contact_info(
                        user_id=updated_user.id,
                        contact_id=contact_id,
                        auth_code=auth_code
                    )
                    
                    if auth_code:
                        contact_info = (f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω (ID: {contact_id})\n"
                                      f"üîê –ö–æ–¥: {auth_code}\n"
                                      f"üåê –ü–æ—Ä—Ç–∞–ª: {config.OKDESK_PORTAL_URL}")
                    else:
                        contact_info = f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω (ID: {contact_id})"
                elif contact_response and contact_response.get('error') == 422:
                    # –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    contact_info = "\n‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    contact_info += f"\nüåê –ü–æ—Ä—Ç–∞–ª: {config.OKDESK_PORTAL_URL}"
                else:
                    contact_info = "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk: {e}")
                contact_info = "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
                [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")],
                [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            message_text = (
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üë§ {full_name}\n"
                f"üì± {phone}\n"
                f"üè¢ {company_name}\n"
                f"üìç {service_object_name}\n"
                f"üî¢ –ò–ù–ù: {inn}"
                f"{contact_info}\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:"
            )
            
            logger.info(f"–î–ª–∏–Ω–∞ contact_info: {len(contact_info)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"–î–ª–∏–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            if len(message_text) > 4000:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º contact_info")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é contact_info
                contact_info_short = "\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω"
                message_text = (
                    "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ {full_name}\n"
                    f"üì± {phone}\n"
                    f"üè¢ {company_name}\n"
                    f"üìç {service_object_name}\n"
                    f"üî¢ –ò–ù–ù: {inn}"
                    f"{contact_info_short}\n\n"
                    "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:"
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∞–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            if len(message_text) > 4096:
                logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                message_text = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ message_or_callback
            if hasattr(message_or_callback, 'message'):
                # –≠—Ç–æ CallbackQuery - —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await message_or_callback.answer()
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_or_callback.bot.send_message(
                    chat_id=message_or_callback.message.chat.id,
                    text=message_text,
                    reply_markup=keyboard
                )
            else:
                # –≠—Ç–æ Message
                await message_or_callback.answer(message_text, reply_markup=keyboard)
        else:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            if hasattr(message_or_callback, 'message'):
                await message_or_callback.answer()
                await message_or_callback.bot.send_message(
                    chat_id=message_or_callback.message.chat.id,
                    text=error_msg
                )
            else:
                await message_or_callback.answer(error_msg)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(error_message) > 4000:
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if hasattr(message_or_callback, 'message'):
            # –≠—Ç–æ CallbackQuery - —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await message_or_callback.answer()
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_or_callback.bot.send_message(
                chat_id=message_or_callback.message.chat.id,
                text=error_message
            )
        else:
            # –≠—Ç–æ Message
            await message_or_callback.answer(error_message)
    
    finally:
        await okdesk_api.close()
    
    await state.clear()

async def get_service_object_name_by_id(callback_or_message, branch_id: int, company_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ ID"""
    try:
        okdesk_api = OkdeskAPI()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ maintenance_entities
        maintenance_entities = await okdesk_api._make_request('GET', 'maintenance_entities')
        if maintenance_entities and isinstance(maintenance_entities, list):
            for obj in maintenance_entities:
                if obj.get('id') == branch_id:
                    await okdesk_api.close()
                    return obj.get('name', f'–û–±—ä–µ–∫—Ç {branch_id}')
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∏–∑ issues
        issues = await okdesk_api._make_request('GET', 'issues/list')
        if issues and isinstance(issues, list):
            for issue in issues:
                company = issue.get('company', {})
                service_obj = issue.get('service_object', {})
                if (isinstance(company, dict) and company.get('id') == company_id and 
                    isinstance(service_obj, dict) and service_obj.get('id') == branch_id):
                    await okdesk_api.close()
                    return service_obj.get('name', f'–û–±—ä–µ–∫—Ç {branch_id}')
        
        await okdesk_api.close()
        return f'–û–±—ä–µ–∫—Ç {branch_id}'
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
        return f'–û–±—ä–µ–∫—Ç {branch_id}'

def get_user_type_text(user_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_type == "physical":
        return "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    elif user_type == "legal":
        return "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"