from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.crud import UserService, IssueService
from services.okdesk_api import OkdeskAPI
from utils.helpers import validate_phone, normalize_phone, validate_inn
import config

router = Router()

def is_user_registered(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
    if not user:
        return False
    
    if user.user_type == "physical" and user.full_name and user.phone:
        return True
    elif user.user_type == "legal" and user.inn_company:
        return True
    
    return False

class RegistrationStates(StatesGroup):
    waiting_for_user_type = State()
    waiting_for_full_name = State()
    waiting_for_phone = State()
    waiting_for_inn = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    
    if is_user_registered(user):
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {get_user_type_text(user.user_type)}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
        )
    else:
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserService.create_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="register_physical")],
            [InlineKeyboardButton(text="üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="register_legal")]
        ])
        
        await message.answer(
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
        await state.set_state(RegistrationStates.waiting_for_user_type)

@router.callback_query(F.data == "register_physical", StateFilter(RegistrationStates.waiting_for_user_type))
async def register_physical(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"""
    await state.update_data(user_type="physical")
    await callback.message.edit_text(
        "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):"
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)

@router.callback_query(F.data == "register_legal", StateFilter(RegistrationStates.waiting_for_user_type))
async def register_legal(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"""
    await state.update_data(user_type="legal")
    await callback.message.edit_text(
        "üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏):"
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)

@router.message(StateFilter(RegistrationStates.waiting_for_full_name))
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    await state.update_data(full_name=message.text)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)"
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    normalized_phone = normalize_phone(phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_type = data.get("user_type")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=normalized_phone)
    
    if user_type == "physical":
        # –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        user = UserService.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user = UserService.update_user_physical(
                user_id=user.id,
                full_name=data["full_name"],
                phone=normalized_phone
            )
            
            if updated_user:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk
                try:
                    okdesk_api = OkdeskAPI()
                    name_parts = updated_user.full_name.split(' ', 1)
                    first_name = name_parts[0] if name_parts else updated_user.full_name
                    last_name = name_parts[1] if len(name_parts) > 1 else "–ö–ª–∏–µ–Ω—Ç"
                    
                    contact_response = await okdesk_api.create_contact(
                        first_name=first_name,
                        last_name=last_name,
                        phone=updated_user.phone,
                        comment=f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram –±–æ—Ç–∞ (ID: {message.from_user.id})"
                    )
                    await okdesk_api.close()
                    
                    if contact_response and 'id' in contact_response:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        contact_id = contact_response['id']
                        auth_code = contact_response.get('authentication_code')
                        
                        UserService.update_user_contact_info(
                            user_id=updated_user.id,
                            contact_id=contact_id,
                            auth_code=auth_code
                        )
                        
                        if auth_code:
                            contact_info = f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})\nüîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_code}"
                        else:
                            contact_info = f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})"
                    else:
                        contact_info = "\n‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤ Okdesk"
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk: {e}")
                    contact_info = "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk"
                
                await message.answer(
                    "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –§–ò–û: {updated_user.full_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {updated_user.phone}"
                    f"{contact_info}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
                )
                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
    elif user_type == "legal":
        # –î–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ò–ù–ù
        await message.answer(
            "üè¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:"
        )
        await state.set_state(RegistrationStates.waiting_for_inn)

@router.message(StateFilter(RegistrationStates.waiting_for_inn))
async def process_inn(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù"""
    inn = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
    if not validate_inn(inn):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.\n"
            "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä –∏ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º."
        )
        return
    
    await message.answer("üîç –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ò–ù–ù...")
    
    # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù
    okdesk_api = OkdeskAPI()
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    try:
        print(f"DEBUG: –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ò–ù–ù {inn}")
        company = await okdesk_api.search_company_by_inn(inn)
        print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {company}")
        
        if company:
            # –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
            await message.answer(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.get('name')}\n"
                "üîó –°–æ–∑–¥–∞—é –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é –∫ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏..."
            )
            
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                updated_user = UserService.update_user_legal(
                    user_id=user.id,
                    inn_company=inn,
                    company_id=company.get("id"),
                    company_name=company.get("name")
                )
                
                if updated_user:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                    try:
                        name_parts = data.get("full_name", "").split(' ', 1)
                        first_name = name_parts[0] if name_parts else data.get("full_name", "")
                        last_name = name_parts[1] if len(name_parts) > 1 else "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å"
                        
                        contact_response = await okdesk_api.create_contact(
                            first_name=first_name,
                            last_name=last_name,
                            phone=data.get("phone", ""),
                            company_id=company.get("id"),  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                            position="–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",
                            comment=f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –∫–æ–º–ø–∞–Ω–∏–∏. –ò–ù–ù: {inn}. –°–æ–∑–¥–∞–Ω –∏–∑ Telegram –±–æ—Ç–∞ (ID: {message.from_user.id})"
                        )
                        
                        if contact_response and 'id' in contact_response:
                            contact_id = contact_response['id']
                            auth_code = contact_response.get('authentication_code')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            UserService.update_user_contact_info(
                                user_id=updated_user.id,
                                contact_id=contact_id,
                                auth_code=auth_code
                            )
                            
                            if auth_code:
                                contact_info = (f"\nÔøΩ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})\n"
                                              f"üîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_code}\n"
                                              f"üåê –í–µ–±-–ø–æ—Ä—Ç–∞–ª: https://yapomogu55.okdesk.ru")
                            else:
                                contact_info = f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})"
                        else:
                            contact_info = "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk"
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk: {e}")
                        contact_info = "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk"
                    
                    await message.answer(
                        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"üë§ –§–ò–û: {data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company.get('name')}\n"
                        f"üî¢ –ò–ù–ù: {inn}"
                        f"{contact_info}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
                    )
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        else:
            # –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            await message.answer(
                f"‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è —Å –ò–ù–ù {inn} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≤–∞—Å –∫–∞–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ò–ù–ù..."
            )
            
            if user:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ —Å –ò–ù–ù
                updated_user = UserService.update_user_legal(
                    user_id=user.id,
                    inn_company=inn,
                    company_id=None,
                    company_name=None
                )
                
                if updated_user:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
                    try:
                        name_parts = data.get("full_name", "").split(' ', 1)
                        first_name = name_parts[0] if name_parts else data.get("full_name", "")
                        last_name = name_parts[1] if len(name_parts) > 1 else "–ö–ª–∏–µ–Ω—Ç"
                        
                        contact_response = await okdesk_api.create_contact(
                            first_name=first_name,
                            last_name=last_name,
                            phone=data.get("phone", ""),
                            comment=f"–ò–ù–ù: {inn}. –°–æ–∑–¥–∞–Ω –∏–∑ Telegram –±–æ—Ç–∞ (ID: {message.from_user.id})"
                        )
                        
                        if contact_response and 'id' in contact_response:
                            contact_id = contact_response['id']
                            auth_code = contact_response.get('authentication_code')
                            
                            UserService.update_user_contact_info(
                                user_id=updated_user.id,
                                contact_id=contact_id,
                                auth_code=auth_code
                            )
                            
                            if auth_code:
                                contact_info = (f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})\n"
                                              f"üîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_code}")
                            else:
                                contact_info = f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk (ID: {contact_id})"
                        else:
                            contact_info = "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk"
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk: {e}")
                        contact_info = "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Okdesk"
                    
                    await message.answer(
                        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"üë§ –§–ò–û: {data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üî¢ –ò–ù–ù: {inn}"
                        f"{contact_info}\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
                    )
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ù–ù: {e}")
        import traceback
        traceback.print_exc()
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ò–ù–ù: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    finally:
        await okdesk_api.close()
    
    await state.clear()

def get_user_type_text(user_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_type == "physical":
        return "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    elif user_type == "legal":
        return "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
