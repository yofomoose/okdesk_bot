from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.crud import UserService, IssueService, CommentService
from services.okdesk_api import OkdeskAPI
from models.database import SessionLocal, Issue
from utils.helpers import create_issue_title
import config
import logging
import asyncio

logger = logging.getLogger(__name__)
router = Router()

def is_user_registered(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
    if not user:
        return False
    
    if user.user_type == "physical" and user.full_name and user.phone:
        return True
    elif user.user_type == "legal" and user.inn_company:
        return True
    
    return False

class IssueStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_comment = State()

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    
    if not is_user_registered(user):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    keyboard_buttons = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")]
    ])
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Ä—Ç–∞–ª–∞
    if user and user.okdesk_contact_id:
        try:
            from update_urls import update_user_portal_access
            import asyncio
            portal_result = await update_user_portal_access(user.telegram_id)
            
            if portal_result.get('success'):
                portal_url = portal_result.get('main_portal_url', config.OKDESK_PORTAL_URL)
                keyboard_buttons.append([InlineKeyboardButton(text="üåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª", url=portal_url)])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª: {e}")
            # Fallback - –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª
            keyboard_buttons.append([InlineKeyboardButton(text="üåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª", url=config.OKDESK_PORTAL_URL)])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.append([InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    
    if not is_user_registered(user):
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    keyboard_buttons = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")]
    ])
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Ä—Ç–∞–ª–∞
    if user and user.okdesk_contact_id:
        try:
            from update_urls import update_user_portal_access
            portal_result = await update_user_portal_access(user.telegram_id)
            
            if portal_result.get('success'):
                portal_url = portal_result.get('main_portal_url', config.OKDESK_PORTAL_URL)
                keyboard_buttons.append([InlineKeyboardButton(text="üåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª", url=portal_url)])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª: {e}")
            # Fallback - –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª
            keyboard_buttons.append([InlineKeyboardButton(text="üåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª", url=config.OKDESK_PORTAL_URL)])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.append([InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_text = "üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
    
    if user.user_type == "physical":
        profile_text += f"üî∏ –¢–∏–ø: –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
        profile_text += f"üë§ –§–ò–û: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    elif user.user_type == "legal":
        profile_text += f"üî∏ –¢–∏–ø: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
        profile_text += f"üë§ –§–ò–û: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        profile_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user.company_name or '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}\n"
        profile_text += f"üî¢ –ò–ù–ù: {user.inn_company or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ –∫ –ø–æ—Ä—Ç–∞–ª—É
    if user.okdesk_contact_id:
        profile_text += f"\nüîó –ö–æ–Ω—Ç–∞–∫—Ç Okdesk: #{user.okdesk_contact_id}\n"
        profile_text += f"üåê –î–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
    else:
        profile_text += f"\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç–∞–ª", url=config.OKDESK_PORTAL_URL)],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"""
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/issue - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –ù–∞–ø–∏—à–∏—Ç–µ /issue
2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏ —Å—Å—ã–ª–∫—É

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞—è–≤–æ–∫:**
‚Ä¢ "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 205"
‚Ä¢ "–ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏"
‚Ä¢ "–°–ª–æ–º–∞–ª—Å—è –º–æ–Ω–∏—Ç–æ—Ä, —ç–∫—Ä–∞–Ω –º–∏–≥–∞–µ—Ç"

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.
"""
    
    await message.answer(help_text)

@router.message(Command("issue"))
async def cmd_create_issue(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    
    if not is_user_registered(user):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    await message.answer(
        "üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä HP LaserJet –≤ –æ—Ñ–∏—Å–µ, –≥–æ—Ä–∏—Ç –∫—Ä–∞—Å–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞'"
    )
    await state.set_state(IssueStates.waiting_for_description)

@router.callback_query(F.data == "create_issue")
async def create_issue_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä HP LaserJet –≤ –æ—Ñ–∏—Å–µ, –≥–æ—Ä–∏—Ç –∫—Ä–∞—Å–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞'"
    )
    await state.set_state(IssueStates.waiting_for_description)

@router.message(StateFilter(IssueStates.waiting_for_description))
async def process_issue_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    description = message.text.strip()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    title = create_issue_title(description)
    
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
        await state.clear()
        return
    
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API
    user_data = {
        "user_type": user.user_type,
        "full_name": user.full_name,
        "phone": user.phone,
        "inn": user.inn_company,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º inn –≤–º–µ—Å—Ç–æ inn_company –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        "telegram_id": user.telegram_id  # –î–æ–±–∞–≤–ª—è–µ–º Telegram ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –∑–∞—è–≤–∫–µ
    if user.okdesk_contact_id:
        user_data["contact_id"] = user.okdesk_contact_id
        logger.info(f"–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫ –∑–∞—è–≤–∫–µ: contact_id = {user.okdesk_contact_id}")
    else:
        logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç contact_id! –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
    if user.company_id:
        user_data["company_id"] = user.company_id
        logger.info(f"–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∫ –∑–∞—è–≤–∫–µ: company_id = {user.company_id}")
    elif user.inn_company:
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –µ—Å—Ç—å –ò–ù–ù ({user.inn_company}), –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ API Okdesk
    okdesk_api = OkdeskAPI()
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è contact_id
        async def update_contact_callback(contact_id: int):
            from database.crud import UserService
            await asyncio.get_event_loop().run_in_executor(
                None, 
                UserService.update_contact_id_by_telegram_id,
                user.telegram_id, 
                contact_id
            )
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω contact_id={contact_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if user.inn_company and not user_data.get("inn"):
            user_data["inn"] = user.inn_company
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è contact_id
        user_data["update_contact_callback"] = update_contact_callback
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ID –∫–æ–Ω—Ç–∞–∫—Ç–∞, –Ω–æ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, 
        # try-–±–ª–æ–∫ –≤–Ω—É—Ç—Ä–∏ create_issue –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        response = await okdesk_api.create_issue(title, description, **user_data)
        
        # –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Okdesk
        if response and "id" in response:
            # –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Okdesk
            okdesk_issue_id = response["id"]
            issue_number = response.get("number", str(okdesk_issue_id))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
            contact_id = user.okdesk_contact_id
            
            if contact_id:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                from update_urls import get_enhanced_issue_urls
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
                try:
                    url_result = await get_enhanced_issue_urls(user.telegram_id, okdesk_issue_id)
                    
                    if url_result.get('success'):
                        okdesk_url = url_result['auto_login_url']  # –°—Å—ã–ª–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
                        simple_url = url_result['simple_url']      # –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
                        main_portal_url = url_result['main_portal_url']  # –ì–ª–∞–≤–Ω–∞—è –ø–æ—Ä—Ç–∞–ª–∞
                        
                        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {okdesk_issue_id}")
                    else:
                        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Å—ã–ª–∫–µ
                        okdesk_url = f"{config.OKDESK_PORTAL_URL}/issues/{okdesk_issue_id}"
                        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞—è–≤–∫–∏ {okdesk_issue_id}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
                    # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Å—ã–ª–∫–µ
                    okdesk_url = f"{config.OKDESK_PORTAL_URL}/issues/{okdesk_issue_id}"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç contact_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª
                okdesk_url = f"{config.OKDESK_PORTAL_URL}/issues/{okdesk_issue_id}"
                logger.warning(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç contact_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
            issue = IssueService.create_issue(
                telegram_user_id=user.telegram_id,
                okdesk_issue_id=okdesk_issue_id,
                title=title,
                description=description,
                status="opened",
                okdesk_url=okdesk_url,
                issue_number=issue_number
            )
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π
            keyboard_buttons = []
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ—Ä—Ç–∞–ª
            keyboard_buttons.append([InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=okdesk_url)])
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å contact_id –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if contact_id and 'url_result' in locals() and url_result.get('success'):
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç–∞–ª–∞
                keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è –ø–æ—Ä—Ç–∞–ª–∞", url=url_result['main_portal_url'])])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard_buttons.extend([
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_status_{issue.id}")],
                [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{issue.id}")],
                [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="my_issues")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{issue_number}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {config.ISSUE_STATUS_MESSAGES.get('opened', '–û—Ç–∫—Ä—ã—Ç–∞')}\n\n"
                f"üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –ø–æ—Ä—Ç–∞–ª–µ: {okdesk_url}\n\n"
                f"üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.\n"
                f"üîê –í—Ö–æ–¥ –≤ –ø–æ—Ä—Ç–∞–ª –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    finally:
        await okdesk_api.close()
    
    await state.clear()

@router.callback_query(F.data == "my_issues")
async def show_my_issues(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    issues = IssueService.get_user_issues(user.telegram_id)
    
    if not issues:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ
    open_statuses = ["opened", "in_progress", "on_hold"]
    closed_statuses = ["resolved", "closed"]
    
    open_issues = [issue for issue in issues if issue.status in open_statuses]
    closed_issues = [issue for issue in issues if issue.status in closed_statuses]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    open_issues.sort(key=lambda x: x.created_at, reverse=True)
    closed_issues.sort(key=lambda x: x.created_at, reverse=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await show_issues_list(callback, open_issues, closed_issues, "open")

async def show_issues_list(callback: CallbackQuery, open_issues, closed_issues, list_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if list_type == "open":
        issues = open_issues
        title = "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"
        switch_button = "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ"
        switch_callback = "show_closed_issues"
    else:
        issues = closed_issues
        title = "üìã –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"
        switch_button = "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ"
        switch_callback = "show_open_issues"
    
    if not issues:
        text = f"{title}\n\n–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ."
    else:
        text = f"{title} ({len(issues)}):\n\n"
        
        for issue in issues:
            status_emoji = config.ISSUE_STATUS_MESSAGES.get(issue.status, issue.status)
            text += f"#{issue.issue_number} - {issue.title}\n{status_emoji}\n\n"
    
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    for issue in issues[:10]:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"#{issue.issue_number} - {issue.title[:20]}...",
                callback_data=f"view_issue_{issue.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if open_issues or closed_issues:
        keyboard_buttons.append([
            InlineKeyboardButton(text=switch_button, callback_data=switch_callback)
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "show_open_issues")
async def show_open_issues(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    issues = IssueService.get_user_issues(user.telegram_id)
    
    open_statuses = ["opened", "in_progress", "on_hold"]
    closed_statuses = ["resolved", "closed"]
    
    open_issues = [issue for issue in issues if issue.status in open_statuses]
    closed_issues = [issue for issue in issues if issue.status in closed_statuses]
    
    open_issues.sort(key=lambda x: x.created_at, reverse=True)
    closed_issues.sort(key=lambda x: x.created_at, reverse=True)
    
    await show_issues_list(callback, open_issues, closed_issues, "open")

@router.callback_query(F.data == "show_closed_issues")
async def show_closed_issues(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    issues = IssueService.get_user_issues(user.telegram_id)
    
    open_statuses = ["opened", "in_progress", "on_hold"]
    closed_statuses = ["resolved", "closed"]
    
    open_issues = [issue for issue in issues if issue.status in open_statuses]
    closed_issues = [issue for issue in issues if issue.status in closed_statuses]
    
    open_issues.sort(key=lambda x: x.created_at, reverse=True)
    closed_issues.sort(key=lambda x: x.created_at, reverse=True)
    
    await show_issues_list(callback, open_issues, closed_issues, "closed")

@router.callback_query(F.data.startswith("view_issue_"))
async def view_issue(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    issue_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    db = SessionLocal()
    try:
        issue = db.query(Issue).filter(Issue.id == issue_id).first()
        if not issue:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Okdesk
        okdesk_api = OkdeskAPI()
        try:
            okdesk_issue = await okdesk_api.get_issue(issue.okdesk_issue_id)
            
            if okdesk_issue:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
                current_status = okdesk_issue.get("status", issue.status)
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å - —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
                if isinstance(current_status, dict):
                    current_status = current_status.get("code", current_status)
                
                if current_status != issue.status:
                    issue.status = current_status
                    db.commit()
        finally:
            await okdesk_api.close()
        
        status_text = config.ISSUE_STATUS_MESSAGES.get(issue.status, issue.status)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
        keyboard_buttons = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
        user = UserService.get_user_by_telegram_id(callback.from_user.id)
        enhanced_url = issue.okdesk_url  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É
        
        if user and user.okdesk_contact_id:
            try:
                from update_urls import get_enhanced_issue_urls
                url_result = await get_enhanced_issue_urls(user.telegram_id, issue.okdesk_issue_id)
                
                if url_result.get('success'):
                    enhanced_url = url_result['auto_login_url']
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –ø–æ—Ä—Ç–∞–ª–∞
                    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è –ø–æ—Ä—Ç–∞–ª–∞", url=url_result['main_portal_url'])])
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enhanced URL: {e}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="ÔøΩ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=enhanced_url)],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_status_{issue.id}")],
            [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{issue.id}")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="my_issues")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üìã –ó–∞—è–≤–∫–∞ #{issue.issue_number}\n\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {issue.title}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {issue.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {issue.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª: {issue.okdesk_url}",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.callback_query(F.data.startswith("add_comment_"))
async def add_comment_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    print(f"üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback.data}")
    identifier = int(callback.data.split("_")[-1])
    print(f"üî¢ –ò–∑–≤–ª–µ—á–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {identifier}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –ø–æ ID –∏–ª–∏ –Ω–æ–º–µ—Ä—É
    issue = IssueService.get_issue_by_id(identifier)
    if not issue:
        print(f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID {identifier}, –∏—â—É –ø–æ –Ω–æ–º–µ—Ä—É...")
        issue = IssueService.get_issue_by_number(identifier)
    
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: #{issue.issue_number} (ID: {issue.id})")
    await state.update_data(issue_id=issue.id)
    
    await callback.message.edit_text(
        f"üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n"
        f"üìù {issue.title}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:"
    )
    await state.set_state(IssueStates.waiting_for_comment)

@router.message(StateFilter(IssueStates.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    data = await state.get_data()
    issue_id = data["issue_id"]
    comment_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    db = SessionLocal()
    try:
        issue = db.query(Issue).filter(Issue.id == issue_id).first()
        if not issue:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        await message.answer("‚è≥ –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = UserService.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ API Okdesk
        okdesk_api = OkdeskAPI()
        try:
            logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ {issue.okdesk_issue_id}")
            logger.info(f"üìã okdesk_contact_id: {user.okdesk_contact_id}")
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å contact_id, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –µ–≥–æ –∏–º–µ–Ω–∏
            contact_id = user.okdesk_contact_id
            if not contact_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Okdesk API
                logger.info(f"üîç –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}")
                found_contact = await okdesk_api.find_contact_by_phone(user.phone)
                if found_contact and 'id' in found_contact:
                    contact_id = found_contact['id']
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —Å ID: {contact_id}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    UserService.update_user_contact_info(
                        user_id=user.id,
                        contact_id=contact_id,
                        auth_code=found_contact.get('authentication_code')
                    )
                else:
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    logger.info(f"ÔøΩ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                    name_parts = user.full_name.split(' ', 1) if user.full_name else ['–ö–ª–∏–µ–Ω—Ç', '']
                    first_name = name_parts[0]
                    last_name = name_parts[1] if len(name_parts) > 1 else "–ö–ª–∏–µ–Ω—Ç"
                    contact_response = await okdesk_api.create_contact(
                        first_name=first_name,
                        last_name=last_name,
                        phone=user.phone,
                        comment=f"–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (Telegram ID: {user.telegram_id})"
                    )
                    if contact_response and 'id' in contact_response:
                        contact_id = contact_response['id']
                        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {contact_id}")
                        UserService.update_user_contact_info(
                            user_id=user.id,
                            contact_id=contact_id,
                            auth_code=contact_response.get('authentication_code')
                        )
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                        logger.error(f"–û—Ç–≤–µ—Ç API: {contact_response}")
                        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                        await state.clear()
                        return
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            response = await okdesk_api.add_comment(
                issue_id=issue.okdesk_issue_id,
                content=f"{comment_text}\n\n(–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç)",
                author_id=contact_id,
                author_type="contact",
                client_phone=user.phone  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            )
            comment_source = "–æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏"
            
            if response and response.get("id"):
                logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}")
                logger.info(f"üìù ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response.get('id')}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—à–µ–π –ë–î
                CommentService.add_comment(
                    issue_id=issue_id,
                    telegram_user_id=message.from_user.id,
                    content=comment_text,
                    okdesk_comment_id=response.get("id")
                )
                
                await message.answer(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
                    f"üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}\n"
                    f"üë§ –°–æ–∑–¥–∞–Ω: {comment_source}\n\n"
                    f"üìù –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª:\n"
                    f"üåê {config.OKDESK_PORTAL_URL}"
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}")
                logger.error(f"–û—Ç–≤–µ—Ç API: {response}")
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}"
                if isinstance(response, dict):
                    error_details = response.get("error") or response.get("errors")
                    if error_details:
                        error_msg += f"\nüîç –î–µ—Ç–∞–ª–∏: {error_details}"
                        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
                    if "author" in str(response).lower():
                        error_msg += f"\nüë§ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–æ–º (ID: {user.okdesk_contact_id})"
                        logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                
                await message.answer(error_msg)
        finally:
            await okdesk_api.close()
    finally:
        db.close()
    
    await state.clear()

@router.callback_query(F.data.startswith("check_status_"))
async def check_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    issue_id = int(callback.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        issue = db.query(Issue).filter(Issue.id == issue_id).first()
        if not issue:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Okdesk
        okdesk_api = OkdeskAPI()
        try:
            okdesk_issue = await okdesk_api.get_issue(issue.okdesk_issue_id)
            
            if okdesk_issue:
                old_status = issue.status
                new_status = okdesk_issue.get("status", issue.status)
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å - —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
                if isinstance(new_status, dict):
                    new_status = new_status.get("code", new_status)
                
                if new_status != old_status:
                    # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                    issue.status = new_status
                    db.commit()
                    
                    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
                    await callback.answer(f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status_text}")
                else:
                    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
                    await callback.answer(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        finally:
            await okdesk_api.close()
    finally:
        db.close()

@router.callback_query(F.data.startswith("rate_"))
async def handle_rating(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: rate_{rating}_{issue_id}
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏")
            return
        
        rating = int(parts[1])
        issue_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        db = SessionLocal()
        try:
            issue = db.query(Issue).filter(Issue.id == issue_id).first()
            if not issue:
                await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ
            rating_text = "‚≠ê" * rating
            comment_text = f"–ö–ª–∏–µ–Ω—Ç –æ—Ü–µ–Ω–∏–ª —Ä–∞–±–æ—Ç—É: {rating_text} ({rating}/5)"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –Ω–∞—à–µ–π –ë–î
            issue.rating = rating
            issue.rating_comment = comment_text
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ API Okdesk
            okdesk_api = OkdeskAPI()
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                rating_response = await okdesk_api.rate_issue(issue.okdesk_issue_id, rating, comment_text)
                
                if rating_response.get('success'):
                    logger.info(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {rating}/5 —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Okdesk –¥–ª—è –∑–∞—è–≤–∫–∏ {issue.okdesk_issue_id} —á–µ—Ä–µ–∑ {rating_response.get('method')}")
                    success_message = f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}"
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ Okdesk: {rating_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    success_message = f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: {'‚≠ê' * rating}"
                
                await callback.answer(success_message)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
                thank_message = (
                    f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!\n\n"
                    f"üìù –ó–∞—è–≤–∫–∞ #{issue.issue_number}\n"
                    f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating} ({rating}/5)\n\n"
                    f"üí¨ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –∑–∞—è–≤–∫–µ –≤ Okdesk.\n"
                    f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º!"
                )
                
                await callback.message.edit_text(
                    thank_message,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")],
                        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏ –≤ Okdesk: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")
            finally:
                await okdesk_api.close()
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user.user_type == "physical":
        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–¢–∏–ø: –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
            f"–§–ò–û: {user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
        )
    elif user.user_type == "legal":
        profile_text = (
            f"üè¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–¢–∏–ø: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
            f"–ò–ù–ù: {user.inn_company}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {user.company_name or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
        )
    else:
        profile_text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(profile_text, reply_markup=keyboard)

@router.callback_query(F.data == "main_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if not user or not is_user_registered(user):
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("add_comment_"))
async def start_add_comment(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ"""
    issue_number = callback.data.split("_")[-1]
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
    issue = IssueService.get_issue_by_number(int(issue_number))
    if not issue:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞—è–≤–∫–∏
    if issue.telegram_user_id != callback.from_user.id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂—É—é –∑–∞—è–≤–∫—É")
        return
    
    await callback.message.edit_text(
        f"üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
        f"üìù {issue.title}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(issue_id=issue.id)
    await state.set_state(IssueStates.waiting_for_comment)
    await callback.answer()
