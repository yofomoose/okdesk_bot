from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.crud import UserService, IssueService, CommentService
from services.okdesk_api import OkdeskAPI
from models.database import SessionLocal, Issue
from utils.helpers import create_issue_title
import config
import logging

logger = logging.getLogger(__name__)
router = Router()

def is_user_registered(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º"""
    if not user:
        return False
    
    if user.user_type == "physical" and user.full_name and user.phone:
        return True
    elif user.user_type == "legal" and user.inn_company:
        return True
    
    return False

class IssueStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_comment = State()

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    
    if not is_user_registered(user):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])
    
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"""
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/issue - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:**
1. –ù–∞–ø–∏—à–∏—Ç–µ /issue
2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏ —Å—Å—ã–ª–∫—É

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞—è–≤–æ–∫:**
‚Ä¢ "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 205"
‚Ä¢ "–ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏"
‚Ä¢ "–°–ª–æ–º–∞–ª—Å—è –º–æ–Ω–∏—Ç–æ—Ä, —ç–∫—Ä–∞–Ω –º–∏–≥–∞–µ—Ç"

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.
"""
    
    await message.answer(help_text)

@router.message(Command("issue"))
async def cmd_create_issue(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    
    if not is_user_registered(user):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    await message.answer(
        "üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä HP LaserJet –≤ –æ—Ñ–∏—Å–µ, –≥–æ—Ä–∏—Ç –∫—Ä–∞—Å–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞'"
    )
    await state.set_state(IssueStates.waiting_for_description)

@router.callback_query(F.data == "create_issue")
async def create_issue_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä HP LaserJet –≤ –æ—Ñ–∏—Å–µ, –≥–æ—Ä–∏—Ç –∫—Ä–∞—Å–Ω–∞—è –ª–∞–º–ø–æ—á–∫–∞'"
    )
    await state.set_state(IssueStates.waiting_for_description)

@router.message(StateFilter(IssueStates.waiting_for_description))
async def process_issue_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    description = message.text.strip()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    title = create_issue_title(description)
    
    user = UserService.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
        await state.clear()
        return
    
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API
    user_data = {
        "user_type": user.user_type,
        "full_name": user.full_name,
        "phone": user.phone,
        "inn_company": user.inn_company,
        "company_id": user.company_id
    }
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –∑–∞—è–≤–∫–µ
    if user.okdesk_contact_id:
        user_data["contact_id"] = user.okdesk_contact_id
        logger.info(f"–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫ –∑–∞—è–≤–∫–µ: contact_id = {user.okdesk_contact_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ API Okdesk
    okdesk_api = OkdeskAPI()
    try:
        response = await okdesk_api.create_issue(title, description, **user_data)
        
        if response and "id" in response:
            # –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Okdesk
            okdesk_issue_id = response["id"]
            issue_number = response.get("number", str(okdesk_issue_id))
            okdesk_url = f"{config.OKDESK_API_URL.replace('/api/v1', '')}/issues/{okdesk_issue_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
            issue = IssueService.create_issue(
                telegram_user_id=user.telegram_id,
                okdesk_issue_id=okdesk_issue_id,
                title=title,
                description=description,
                status="opened",
                okdesk_url=okdesk_url,
                issue_number=issue_number
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", url=okdesk_url)],
                [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{issue.id}")],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_status_{issue.id}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{issue_number}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {config.ISSUE_STATUS_MESSAGES.get('opened', '–û—Ç–∫—Ä—ã—Ç–∞')}\n\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: {okdesk_url}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    finally:
        await okdesk_api.close()
    
    await state.clear()

@router.callback_query(F.data == "my_issues")
async def show_my_issues(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    issues = IssueService.get_user_issues(user.telegram_id)
    
    if not issues:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    
    keyboard_buttons = []
    text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    
    for issue in issues[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫
        status_emoji = config.ISSUE_STATUS_MESSAGES.get(issue.status, issue.status)
        text += f"#{issue.issue_number} - {issue.title}\n{status_emoji}\n\n"
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"#{issue.issue_number} - {issue.title[:20]}...",
                callback_data=f"view_issue_{issue.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("view_issue_"))
async def view_issue(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    issue_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    db = SessionLocal()
    try:
        issue = db.query(Issue).filter(Issue.id == issue_id).first()
        if not issue:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Okdesk
        okdesk_api = OkdeskAPI()
        try:
            okdesk_issue = await okdesk_api.get_issue(issue.okdesk_issue_id)
            
            if okdesk_issue:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
                current_status = okdesk_issue.get("status", issue.status)
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å - —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
                if isinstance(current_status, dict):
                    current_status = current_status.get("code", current_status)
                
                if current_status != issue.status:
                    issue.status = current_status
                    db.commit()
        finally:
            await okdesk_api.close()
        
        status_text = config.ISSUE_STATUS_MESSAGES.get(issue.status, issue.status)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", url=issue.okdesk_url)],
            [InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{issue.id}")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_status_{issue.id}")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="my_issues")]
        ])
        
        await callback.message.edit_text(
            f"üìã –ó–∞—è–≤–∫–∞ #{issue.issue_number}\n\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {issue.title}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {issue.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {issue.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {issue.okdesk_url}",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.callback_query(F.data.startswith("add_comment_"))
async def add_comment_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    issue_id = int(callback.data.split("_")[-1])
    await state.update_data(issue_id=issue_id)
    
    await callback.message.edit_text(
        "üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:"
    )
    await state.set_state(IssueStates.waiting_for_comment)

@router.message(StateFilter(IssueStates.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    data = await state.get_data()
    issue_id = data["issue_id"]
    comment_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    db = SessionLocal()
    try:
        issue = db.query(Issue).filter(Issue.id == issue_id).first()
        if not issue:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        await message.answer("‚è≥ –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = UserService.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ API Okdesk
        okdesk_api = OkdeskAPI()
        try:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å contact_id, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –µ–≥–æ –∏–º–µ–Ω–∏
            if user.okdesk_contact_id:
                response = await okdesk_api.add_comment(
                    issue_id=issue.okdesk_issue_id,
                    content=f"{comment_text}\n\n(–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç)",
                    author_id=user.okdesk_contact_id,
                    author_type="contact"
                )
                comment_source = "–æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏"
            else:
                # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ contact_id –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
                formatted_comment = f"üí¨ **{user.full_name}** (—á–µ—Ä–µ–∑ Telegram):\n\n{comment_text}"
                
                response = await okdesk_api.add_comment(
                    issue_id=issue.okdesk_issue_id,
                    content=formatted_comment,
                    author_id=config.OKDESK_SYSTEM_USER_ID
                )
                comment_source = "—á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
            if response:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—à–µ–π –ë–î
                CommentService.add_comment(
                    issue_id=issue_id,
                    telegram_user_id=message.from_user.id,
                    content=comment_text,
                    okdesk_comment_id=response.get("id")
                )
                
                await message.answer(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
                    f"üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}\n"
                    f"üë§ –°–æ–∑–¥–∞–Ω: {comment_source}\n\n"
                    f"üìù –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª:\n"
                    f"üåê https://yapomogu55.okdesk.ru"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        finally:
            await okdesk_api.close()
    finally:
        db.close()
    
    await state.clear()

@router.callback_query(F.data.startswith("check_status_"))
async def check_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    issue_id = int(callback.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        issue = db.query(Issue).filter(Issue.id == issue_id).first()
        if not issue:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Okdesk
        okdesk_api = OkdeskAPI()
        try:
            okdesk_issue = await okdesk_api.get_issue(issue.okdesk_issue_id)
            
            if okdesk_issue:
                old_status = issue.status
                new_status = okdesk_issue.get("status", issue.status)
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å - —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
                if isinstance(new_status, dict):
                    new_status = new_status.get("code", new_status)
                
                if new_status != old_status:
                    # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                    issue.status = new_status
                    db.commit()
                    
                    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
                    await callback.answer(f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status_text}")
                else:
                    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
                    await callback.answer(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        finally:
            await okdesk_api.close()
    finally:
        db.close()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user.user_type == "physical":
        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–¢–∏–ø: –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
            f"–§–ò–û: {user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
        )
    elif user.user_type == "legal":
        profile_text = (
            f"üè¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–¢–∏–ø: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
            f"–ò–ù–ù: {user.inn_company}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {user.company_name or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
        )
    else:
        profile_text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(profile_text, reply_markup=keyboard)

@router.callback_query(F.data == "main_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_menu(callback.message)
