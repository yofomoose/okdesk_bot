import os
import sys
from pathlib import Path
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from models.database import SessionLocal, Issue, User
from database.crud import IssueService, UserService
from services.okdesk_api import OkdeskAPI
import config
import config

async def update_existing_urls():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç URL —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ—Ä—Ç–∞–ª"""
    session = SessionLocal()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å URL (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è)
        issues = session.query(Issue.id, Issue.issue_number, Issue.okdesk_url, Issue.telegram_user_id).filter(Issue.okdesk_url.isnot(None)).all()

        updated_count = 0
        api = OkdeskAPI()

        for issue_data in issues:
            issue_id_db, issue_number, okdesk_url, telegram_user_id = issue_data
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = UserService.get_user_by_telegram_id(telegram_user_id)
            user_portal_token = user.portal_token if user else None
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –ø–æ—Ä—Ç–∞–ª–∞, –Ω–æ –µ—Å—Ç—å contact_id, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ
            if not user_portal_token and user and user.okdesk_contact_id:
                try:
                    logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} (contact_id: {user.okdesk_contact_id})")
                    portal_token = await api.get_contact_portal_token(user.okdesk_contact_id)
                    if portal_token:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        UserService.update_portal_token_by_telegram_id(telegram_user_id, portal_token)
                        user_portal_token = portal_token
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–∫–µ–Ω –ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL API –ø—É—Ç—å
            if '/api/v1' in okdesk_url or 'okdesk.ru/issues/' in okdesk_url:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ URL
                if '/issues/' in okdesk_url:
                    parts = okdesk_url.split('/issues/')
                    if len(parts) > 1:
                        issue_id = parts[1].split('/')[0].split('?')[0]
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if user_portal_token:
                            new_url = f"{config.OKDESK_PORTAL_URL}/login?token={user_portal_token}&redirect=/issues/{issue_id}"
                        else:
                            new_url = f"{config.OKDESK_PORTAL_URL}/issues/{issue_id}"
                        
                        print(f"–û–±–Ω–æ–≤–ª—è—é –∑–∞—è–≤–∫—É #{issue_number}: {okdesk_url} -> {new_url}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        session.query(Issue).filter(Issue.id == issue_id_db).update({"okdesk_url": new_url})
                        updated_count += 1
                        
        session.commit()
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} URL –∑–∞—è–≤–æ–∫")

    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL: {e}")
    finally:
        session.close()

class PortalURLGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL-–∞–¥—Ä–µ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞"""
    
    def __init__(self):
        self.api = OkdeskAPI()
        self.portal_url = config.OKDESK_PORTAL_URL
        
    async def create_login_link(self, contact_id: int, redirect_url: str = None, expire_minutes: int = 60*24*30) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ—Ä—Ç–∞–ª –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ OkDesk
            redirect_url: URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /issues/123)
            expire_minutes: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)
            
        Returns:
            str: URL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–æ—Ä—Ç–∞–ª
        """
        try:
            data = {
                'user_type': 'contact',
                'user_id': contact_id,
                'expire_after': expire_minutes,
                'one_time': False  # –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            }
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}")
            response = await self.api._make_request('POST', 'login_link', data)
            
            if response and ('url' in response or 'login_link' in response):
                # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏–±–æ 'url', –ª–∏–±–æ 'login_link'
                login_url = response.get('url') or response.get('login_link')
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤—Ö–æ–¥–∞: {login_url}")
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω redirect_url, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å—Å—ã–ª–∫–µ
                if redirect_url:
                    # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –∏–∑ redirect_url –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    redirect_clean = redirect_url.lstrip('/')
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä redirect –∫ URL
                    if '?' in login_url:
                        final_url = f"{login_url}&redirect={redirect_clean}"
                    else:
                        final_url = f"{login_url}?redirect={redirect_clean}"
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω redirect: {final_url}")
                    return final_url
                else:
                    return login_url
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –≤—Ö–æ–¥–∞: {response}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª –∫–∞–∫ fallback
                return self.portal_url
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤—Ö–æ–¥–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª –∫–∞–∫ fallback
            return self.portal_url
    
    async def get_issue_portal_url(self, contact_id: int, issue_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ OkDesk
            issue_id: ID –∑–∞—è–≤–∫–∏ –≤ OkDesk
            
        Returns:
            str: URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
        """
        redirect_path = f"issues/{issue_id}"
        return await self.create_login_link(contact_id, redirect_path)
    
    async def get_portal_main_url(self, contact_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ OkDesk
            
        Returns:
            str: URL –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º
        """
        return await self.create_login_link(contact_id)
    
    def get_simple_issue_url(self, issue_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞—è–≤–∫—É –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
        
        Args:
            issue_id: ID –∑–∞—è–≤–∫–∏ –≤ OkDesk
            
        Returns:
            str: –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É
        """
        return f"{self.portal_url}/issues/{issue_id}"
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.api:
            await self.api.close()


async def update_user_portal_access(telegram_id: int, contact_id: int = None) -> dict:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ—Ä—Ç–∞–ª—É, —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞
    
    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ OkDesk (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã)
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = UserService.get_user_by_telegram_id(telegram_id)
        if not user:
            return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ü–æ–ª—É—á–∞–µ–º contact_id
        if not contact_id:
            contact_id = user.okdesk_contact_id
            
        if not contact_id:
            return {'error': 'Contact ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫
        url_gen = PortalURLGenerator()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª
            main_portal_url = await url_gen.get_portal_main_url(contact_id)
            
            result = {
                'success': True,
                'contact_id': contact_id,
                'main_portal_url': main_portal_url,
                'portal_base_url': config.OKDESK_PORTAL_URL
            }
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return result
            
        finally:
            await url_gen.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–ª—É: {e}")
        return {'error': str(e)}


async def get_enhanced_issue_urls(telegram_id: int, issue_id: int) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        issue_id: ID –∑–∞—è–≤–∫–∏ –≤ OkDesk
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞—è–≤–∫—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = UserService.get_user_by_telegram_id(telegram_id)
        if not user:
            return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        contact_id = user.okdesk_contact_id
        if not contact_id:
            return {'error': 'Contact ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫
        url_gen = PortalURLGenerator()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            auto_login_url = await url_gen.get_issue_portal_url(contact_id, issue_id)
            simple_url = url_gen.get_simple_issue_url(issue_id)
            main_portal_url = await url_gen.get_portal_main_url(contact_id)
            
            result = {
                'success': True,
                'issue_id': issue_id,
                'contact_id': contact_id,
                'auto_login_url': auto_login_url,  # URL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º –Ω–∞ –∑–∞—è–≤–∫—É
                'simple_url': simple_url,          # –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É
                'main_portal_url': main_portal_url, # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ä—Ç–∞–ª–∞
                'portal_base_url': config.OKDESK_PORTAL_URL
            }
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞—è–≤–∫—É {issue_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return result
            
        finally:
            await url_gen.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞—è–≤–∫—É: {e}")
        return {'error': str(e)}


async def test_portal_integration():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ—Ä—Ç–∞–ª–æ–º"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ—Ä—Ç–∞–ª–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    api = OkdeskAPI()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        test_contact = await api.create_contact(
            first_name="–¢–µ—Å—Ç",
            last_name="–ü–æ—Ä—Ç–∞–ª–æ–≤",
            phone="+79999999999",
            comment="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞–ª–∞"
        )
        
        if test_contact and 'id' in test_contact:
            contact_id = test_contact['id']
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç ID={contact_id}")
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–æ–∫
            url_gen = PortalURLGenerator()
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤—Ö–æ–¥–∞
                login_url = await url_gen.get_portal_main_url(contact_id)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤—Ö–æ–¥–∞: {login_url}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
                issue_url = await url_gen.get_issue_portal_url(contact_id, 1)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: {issue_url}")
                
                return {
                    'success': True,
                    'test_contact_id': contact_id,
                    'login_url': login_url,
                    'issue_url': issue_url
                }
                
            finally:
                await url_gen.close()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç'}
            
    finally:
        await api.close()


if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞
        result = asyncio.run(test_portal_integration())
        print("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", result)
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
        asyncio.run(update_existing_urls())