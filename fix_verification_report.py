#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import json
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.database import DatabaseManager
from services.okdesk_api import OkdeskAPI
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

class FixVerificationReport:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.db = DatabaseManager('okdesk_bot.db')
        self.api = None
        self.report = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "database_status": {},
            "api_status": {},
            "fixes_verification": {
                "client_binding": {
                    "status": None,
                    "details": []
                },
                "comment_author": {
                    "status": None,
                    "details": []
                }
            }
        }
    
    async def generate_report(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        
        logger.info("üîç –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            self.api = OkdeskAPI()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
            self._check_database()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._check_api_connection()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
            await self._verify_client_binding_fix()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            await self._verify_comment_author_fix()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            self._save_report()
            
            return self.report
            
        finally:
            if self.api:
                await self.api.close()
            self.db.close()
    
    def _check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –ë–î
        db_exists = os.path.exists('okdesk_bot.db')
        self.report["database_status"]["file_exists"] = db_exists
        
        if not db_exists:
            logger.error("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –ë–î
            tables = self.db.fetch_all(
                "SELECT name FROM sqlite_master WHERE type='table'"
            )
            
            self.report["database_status"]["tables"] = [table[0] for table in tables]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
            required_tables = ["users", "issues", "comments"]
            for table in required_tables:
                if table not in [t[0] for t in tables]:
                    logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
            table_counts = {}
            for table in self.report["database_status"]["tables"]:
                count = self.db.fetch_one(f"SELECT COUNT(*) FROM {table}")[0]
                table_counts[table] = count
                
            self.report["database_status"]["record_counts"] = table_counts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            self._check_table_structure("users")
            self._check_table_structure("issues")
            self._check_table_structure("comments")
            
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.report["database_status"]["error"] = str(e)
    
    def _check_table_structure(self, table_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
        
        try:
            columns = self.db.fetch_all(f"PRAGMA table_info({table_name})")
            self.report["database_status"]["structure"] = self.report["database_status"].get("structure", {})
            self.report["database_status"]["structure"][table_name] = [
                {"name": col[1], "type": col[2]} for col in columns
            ]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
    
    async def _check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            companies = await self.api.get_companies_list(per_page=1)
            
            if companies:
                logger.info("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.report["api_status"]["connection"] = "ok"
                self.report["api_status"]["companies_available"] = True
            else:
                logger.error("‚ùå API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö")
                self.report["api_status"]["connection"] = "no_data"
                self.report["api_status"]["companies_available"] = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
            self.report["api_status"]["connection"] = "error"
            self.report["api_status"]["error"] = str(e)
    
    async def _verify_client_binding_fix(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –∑–∞—è–≤–∫–∞–º"""
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –∑–∞—è–≤–∫–∞–º")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
            issues = await self.api.search_issues(page=1, per_page=10)
            
            if not issues:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
                self.report["fixes_verification"]["client_binding"]["status"] = "error"
                return
                
            self.report["fixes_verification"]["client_binding"]["total_checked"] = len(issues)
            issues_with_clients = 0
            
            for issue in issues:
                issue_id = issue.get('id')
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                issue_details = await self.api.get_issue(issue_id)
                
                if not issue_details:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ {issue_id}")
                    continue
                
                client_info = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                if 'contact' in issue_details and issue_details['contact']:
                    client_info["contact"] = {
                        "id": issue_details['contact'].get('id'),
                        "name": issue_details['contact'].get('name')
                    }
                    issues_with_clients += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                if 'company' in issue_details and issue_details['company']:
                    client_info["company"] = {
                        "id": issue_details['company'].get('id'),
                        "name": issue_details['company'].get('name')
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –æ—Ç—á–µ—Ç
                self.report["fixes_verification"]["client_binding"]["details"].append({
                    "issue_id": issue_id,
                    "subject": issue_details.get('subject'),
                    "has_client": bool('contact' in issue_details and issue_details['contact']),
                    "client_info": client_info
                })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            binding_ratio = issues_with_clients / len(issues) if issues else 0
            
            if binding_ratio > 0.8:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 80% –∑–∞—è–≤–æ–∫ –∏–º–µ—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—á–∏—Ç–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
                self.report["fixes_verification"]["client_binding"]["status"] = "fixed"
                logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç ({binding_ratio:.0%} –∑–∞—è–≤–æ–∫ –∏–º–µ—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤)")
            elif binding_ratio > 0.5:  # –ï—Å–ª–∏ –æ—Ç 50% –¥–æ 80%, —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                self.report["fixes_verification"]["client_binding"]["status"] = "partial"
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ ({binding_ratio:.0%} –∑–∞—è–≤–æ–∫ –∏–º–µ—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤)")
            else:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 50%, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                self.report["fixes_verification"]["client_binding"]["status"] = "not_fixed"
                logger.error(f"‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({binding_ratio:.0%} –∑–∞—è–≤–æ–∫ –∏–º–µ—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤)")
            
            self.report["fixes_verification"]["client_binding"]["binding_ratio"] = binding_ratio
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            self.report["fixes_verification"]["client_binding"]["status"] = "error"
            self.report["fixes_verification"]["client_binding"]["error"] = str(e)
    
    async def _verify_comment_author_fix(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
            issues = await self.api.search_issues(page=1, per_page=5)
            
            if not issues:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
                self.report["fixes_verification"]["comment_author"]["status"] = "error"
                return
            
            total_comments = 0
            comments_with_authors = 0
            
            for issue in issues:
                issue_id = issue.get('id')
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞—è–≤–∫–∏
                comments = await self.api.get_issue_comments(issue_id)
                
                if not comments:
                    continue
                    
                total_comments += len(comments)
                
                for comment in comments:
                    comment_id = comment.get('id')
                    has_author = bool('author' in comment and comment['author'])
                    
                    if has_author:
                        comments_with_authors += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ—Ç—á–µ—Ç
                    self.report["fixes_verification"]["comment_author"]["details"].append({
                        "comment_id": comment_id,
                        "issue_id": issue_id,
                        "has_author": has_author,
                        "author_info": comment.get('author', {})
                    })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.report["fixes_verification"]["comment_author"]["total_checked"] = total_comments
            
            if total_comments == 0:
                logger.warning("‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.report["fixes_verification"]["comment_author"]["status"] = "unknown"
                return
                
            author_ratio = comments_with_authors / total_comments
            
            if author_ratio > 0.8:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 80% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–º–µ—é—Ç –∞–≤—Ç–æ—Ä–æ–≤, —Å—á–∏—Ç–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
                self.report["fixes_verification"]["comment_author"]["status"] = "fixed"
                logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç ({author_ratio:.0%} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–º–µ—é—Ç –∞–≤—Ç–æ—Ä–æ–≤)")
            elif author_ratio > 0.5:  # –ï—Å–ª–∏ –æ—Ç 50% –¥–æ 80%, —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                self.report["fixes_verification"]["comment_author"]["status"] = "partial"
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ ({author_ratio:.0%} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–º–µ—é—Ç –∞–≤—Ç–æ—Ä–æ–≤)")
            else:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 50%, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                self.report["fixes_verification"]["comment_author"]["status"] = "not_fixed"
                logger.error(f"‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({author_ratio:.0%} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–º–µ—é—Ç –∞–≤—Ç–æ—Ä–æ–≤)")
            
            self.report["fixes_verification"]["comment_author"]["author_ratio"] = author_ratio
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            self.report["fixes_verification"]["comment_author"]["status"] = "error"
            self.report["fixes_verification"]["comment_author"]["error"] = str(e)
    
    def _save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
        
        report_file = f"fix_verification_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(report_file, "w", encoding="utf-8") as f:
                json.dump(self.report, f, ensure_ascii=False, indent=2)
                
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    report_generator = FixVerificationReport()
    report = await report_generator.generate_report()
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥
    logger.info("\nüìã –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    
    client_binding_status = report["fixes_verification"]["client_binding"]["status"]
    comment_author_status = report["fixes_verification"]["comment_author"]["status"]
    
    if client_binding_status == "fixed":
        logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
    elif client_binding_status == "partial":
        logger.info("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
    else:
        logger.info("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        
    if comment_author_status == "fixed":
        logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –†–ê–ë–û–¢–ê–ï–¢")
    elif comment_author_status == "partial":
        logger.info("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
    elif comment_author_status == "unknown":
        logger.info("‚ùì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –ù–ï–ò–ó–í–ï–°–¢–ù–û (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
    else:
        logger.info("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    return report

if __name__ == "__main__":
    asyncio.run(main())
