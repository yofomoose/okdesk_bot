#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π rating –∏ rating_comment –≤ —Ç–∞–±–ª–∏—Ü—É issues
"""

import sqlite3
import os
from pathlib import Path

def migrate_database():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists("/app/data"):
        # –ó–∞–ø—É—â–µ–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        db_path = "/app/data/okdesk_bot.db"
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        db_path = "data/okdesk_bot.db"

    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è
        cursor.execute("PRAGMA table_info(issues)")
        columns = cursor.fetchall()
        column_names = [col[1] for col in columns]

        print(f"üìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã issues: {column_names}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ rating, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'rating' not in column_names:
            print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è rating...")
            cursor.execute("ALTER TABLE issues ADD COLUMN rating INTEGER")
            print("‚úÖ –ü–æ–ª–µ rating –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ÑπÔ∏è  –ü–æ–ª–µ rating —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ rating_comment, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'rating_comment' not in column_names:
            print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è rating_comment...")
            cursor.execute("ALTER TABLE issues ADD COLUMN rating_comment TEXT")
            print("‚úÖ –ü–æ–ª–µ rating_comment –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        else:
            print("‚ÑπÔ∏è  –ü–æ–ª–µ rating_comment —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("PRAGMA table_info(issues)")
        updated_columns = cursor.fetchall()
        updated_column_names = [col[1] for col in updated_columns]

        print(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã issues: {updated_column_names}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn.close()

        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    success = migrate_database()
    if success:
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("üí• –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        exit(1)