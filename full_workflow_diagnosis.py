#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import sys
import os
import logging
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.okdesk_api import OkdeskAPI
from services.database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

# –í–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–≤ API
logging.getLogger('services.okdesk_api').setLevel(logging.DEBUG)

async def full_workflow_diagnosis():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
    api = OkdeskAPI()
    db = DatabaseManager('okdesk_bot.db')
    
    try:
        timestamp = int(time.time())
        
        logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
        logger.info(f"   Timestamp: {timestamp}")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Okdesk")
        
        companies = await api.get_companies_list(per_page=1)
        if companies:
            logger.info(f"‚úÖ API Okdesk –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ API Okdesk")
            return False
            
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        logger.info("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        
        phone = f"+7999{timestamp % 10000000}"
        telegram_id = f"test{timestamp}"
        
        contact_data = {
            "first_name": "–¢–µ—Å—Ç",
            "last_name": f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞{timestamp}",
            "phone": phone,
            "comment": f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (timestamp: {timestamp}, telegram_id: {telegram_id})"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        logger.info("   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        user_data = {
            "telegram_id": telegram_id,
            "first_name": contact_data["first_name"],
            "last_name": contact_data["last_name"],
            "phone": phone,
            "created_at": timestamp,
            "okdesk_contact_id": None  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        }
        
        db.execute(
            """
            INSERT OR REPLACE INTO users 
            (telegram_id, first_name, last_name, phone, created_at, okdesk_contact_id) 
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (
                user_data["telegram_id"], 
                user_data["first_name"], 
                user_data["last_name"], 
                user_data["phone"], 
                user_data["created_at"], 
                user_data["okdesk_contact_id"]
            )
        )
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Okdesk
        contact = await api.create_contact(**contact_data)
        
        if not contact or 'id' not in contact:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {contact}")
            return False
            
        contact_id = contact['id']
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Okdesk: ID={contact_id}, –ò–º—è={contact.get('name')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        db.execute(
            "UPDATE users SET okdesk_contact_id = ? WHERE telegram_id = ?",
            (contact_id, telegram_id)
        )
        db.commit()
        logger.info(f"‚úÖ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        logger.info("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_formats = [
            phone,
            phone.replace("+", ""),
            phone.replace("+7", "8"),
            phone[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
        ]
        
        for format_phone in phone_formats:
            logger.info(f"   –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {format_phone}")
            found_contact = await api.find_contact_by_phone(format_phone)
            
            if found_contact and found_contact.get('id') == contact_id:
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {format_phone}")
            else:
                if found_contact:
                    logger.warning(f"‚ö†Ô∏è –ü–æ —Ñ–æ—Ä–º–∞—Ç—É {format_phone} –Ω–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç: {found_contact}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {format_phone}")
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ contact_id
        logger.info("4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ contact_id")
        
        issue_data = {
            "title": f"–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (contact_id) {timestamp}",
            "description": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ contact_id (timestamp: {timestamp})",
            "contact_id": contact_id,
            "telegram_id": telegram_id
        }
        
        issue1 = await api.create_issue(**issue_data)
        
        if not issue1 or 'id' not in issue1:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {issue1}")
            return False
            
        issue1_id = issue1['id']
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={issue1_id}")
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–µ
        logger.info("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–µ")
        
        issue1_details = await api.get_issue(issue1_id)
        
        if issue1_details and 'contact' in issue1_details:
            contact_info = issue1_details.get('contact')
            if contact_info and contact_info.get('id') == contact_id:
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–µ: {contact_info}")
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞—è–≤–∫–µ
                logger.info(f"   ID: {contact_info.get('id')}")
                logger.info(f"   –ò–º—è: {contact_info.get('name')}")
            else:
                logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π: {contact_info}")
                logger.error(f"   –û–∂–∏–¥–∞–ª—Å—è ID: {contact_id}, –ü–æ–ª—É—á–µ–Ω: {contact_info.get('id') if contact_info else 'None'}")
        else:
            logger.error(f"‚ùå –í –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –∑–∞—è–≤–∫–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        db.execute(
            """
            INSERT INTO issues 
            (issue_id, telegram_id, created_at) 
            VALUES (?, ?, ?)
            """,
            (issue1_id, telegram_id, timestamp)
        )
        db.commit()
        logger.info(f"‚úÖ –°–≤—è–∑—å –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        logger.info("6Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        
        issue_data = {
            "title": f"–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (phone) {timestamp}",
            "description": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (timestamp: {timestamp})",
            "phone": phone,
            "telegram_id": telegram_id,
            "full_name": f"{contact_data['first_name']} {contact_data['last_name']}"
        }
        
        issue2 = await api.create_issue(**issue_data)
        
        if not issue2 or 'id' not in issue2:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É: {issue2}")
            return False
            
        issue2_id = issue2['id']
        logger.info(f"‚úÖ –í—Ç–æ—Ä–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={issue2_id}")
        
        # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–π –∑–∞—è–≤–∫–µ
        logger.info("7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ –≤—Ç–æ—Ä–æ–π –∑–∞—è–≤–∫–µ")
        
        issue2_details = await api.get_issue(issue2_id)
        
        if issue2_details and 'contact' in issue2_details:
            contact_info = issue2_details.get('contact')
            if contact_info and contact_info.get('id') == contact_id:
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ –≤—Ç–æ—Ä–æ–π –∑–∞—è–≤–∫–µ: {contact_info}")
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞—è–≤–∫–µ
                logger.info(f"   ID: {contact_info.get('id')}")
                logger.info(f"   –ò–º—è: {contact_info.get('name')}")
            else:
                logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π: {contact_info}")
                logger.error(f"   –û–∂–∏–¥–∞–ª—Å—è ID: {contact_id}, –ü–æ–ª—É—á–µ–Ω: {contact_info.get('id') if contact_info else 'None'}")
        else:
            logger.error(f"‚ùå –í–æ –≤—Ç–æ—Ä–æ–π –∑–∞—è–≤–∫–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –∑–∞—è–≤–∫–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        db.execute(
            """
            INSERT INTO issues 
            (issue_id, telegram_id, created_at) 
            VALUES (?, ?, ?)
            """,
            (issue2_id, telegram_id, timestamp)
        )
        db.commit()
        logger.info(f"‚úÖ –°–≤—è–∑—å –≤—Ç–æ—Ä–æ–π –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞
        logger.info("8Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞")
        
        comment_text = f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å –∞–≤—Ç–æ—Ä–æ–º (timestamp: {timestamp})"
        comment = await api.create_comment(
            issue_id=issue1_id,
            content=comment_text,
            contact_id=contact_id
        )
        
        if not comment or 'id' not in comment:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            return False
            
        comment_id = comment['id']
        logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω: ID={comment_id}")
        
        # –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        logger.info("9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞—è–≤–∫–∏
        comments = await api.get_issue_comments(issue1_id)
        
        if not comments:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞—è–≤–∫–∏")
            return False
            
        # –ò—â–µ–º –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        found = False
        for comment in comments:
            if comment.get('id') == comment_id:
                found = True
                author = comment.get('author')
                
                if author:
                    author_id = author.get('id')
                    author_name = author.get('name')
                    
                    if author_id == contact_id:
                        logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞: ID={author_id}, –ò–º—è={author_name}")
                    else:
                        logger.error(f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞: ID={author_id}, –ò–º—è={author_name}")
                        logger.error(f"   –û–∂–∏–¥–∞–ª—Å—è ID: {contact_id}")
                else:
                    logger.error(f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–º–µ–µ—Ç –∞–≤—Ç–æ—Ä–∞")
                    
                logger.info(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment.get('content')}")
                break
                
        if not found:
            logger.error(f"‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞—è–≤–∫–∏")
        
        # –®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        logger.info("üîü –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_record = db.fetch_one(
            "SELECT * FROM users WHERE telegram_id = ?",
            (telegram_id,)
        )
        
        if user_record:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞:")
            logger.info(f"   Telegram ID: {user_record[0]}")
            logger.info(f"   –ò–º—è: {user_record[1]} {user_record[2]}")
            logger.info(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user_record[3]}")
            logger.info(f"   Okdesk Contact ID: {user_record[5]}")
            
            if user_record[5] == contact_id:
                logger.info(f"‚úÖ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Okdesk")
            else:
                logger.error(f"‚ùå ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Okdesk!")
                logger.error(f"   –í –ë–î: {user_record[5]}, –≤ Okdesk: {contact_id}")
        else:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –∑–∞—è–≤–∫–∞–º–∏
        issues_records = db.fetch_all(
            "SELECT * FROM issues WHERE telegram_id = ?",
            (telegram_id,)
        )
        
        if issues_records:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(issues_records)} –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –±–æ—Ç–∞:")
            
            found_issue1 = False
            found_issue2 = False
            
            for record in issues_records:
                issue_id_db = record[0]
                logger.info(f"   –ó–∞—è–≤–∫–∞ ID: {issue_id_db}")
                
                if issue_id_db == issue1_id:
                    found_issue1 = True
                elif issue_id_db == issue2_id:
                    found_issue2 = True
            
            if found_issue1:
                logger.info(f"‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
            else:
                logger.error(f"‚ùå –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
                
            if found_issue2:
                logger.info(f"‚úÖ –í—Ç–æ—Ä–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
            else:
                logger.error(f"‚ùå –í—Ç–æ—Ä–∞—è –∑–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        else:
            logger.error(f"‚ùå –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info(f"üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"üìã –ò—Ç–æ–≥–∏:")
        logger.info(f"   –ö–æ–Ω—Ç–∞–∫—Ç: ID={contact_id}, –ò–º—è={contact.get('name')}")
        logger.info(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
        logger.info(f"   Telegram ID: {telegram_id}")
        logger.info(f"   –ó–∞—è–≤–∫–∞ 1: ID={issue1_id}")
        logger.info(f"   –ó–∞—è–≤–∫–∞ 2: ID={issue2_id}")
        logger.info(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ID={comment_id}")
        
        return True
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        await api.close()
        db.close()

if __name__ == "__main__":
    result = asyncio.run(full_workflow_diagnosis())
    sys.exit(0 if result else 1)
