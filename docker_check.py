#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
"""
import subprocess
import sys
import os

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker"""
    try:
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker Compose"""
    try:
        result = subprocess.run(['docker', 'compose', 'version'], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞"""
    if os.path.exists('.env'):
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        return True
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return False

def check_data_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data"""
    if not os.path.exists('data'):
        os.makedirs('data')
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/")
    else:
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    return True

def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í")
    print("=" * 50)
    
    checks = [
        ("Docker", check_docker),
        ("Docker Compose", check_docker_compose),
        (".env —Ñ–∞–π–ª", check_env_file),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data", check_data_directory)
    ]
    
    all_passed = True
    
    for name, check_func in checks:
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}")
        if not check_func():
            all_passed = False
    
    print(f"\n{'='*50}")
    
    if all_passed:
        print("üöÄ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs -f")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("\nüí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        sys.exit(1)

if __name__ == "__main__":
    main()
