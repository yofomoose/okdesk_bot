from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional
import json
import hmac
import hashlib
from database.crud import IssueService, CommentService, UserService
from models.database import create_tables
from services.okdesk_api import OkdeskAPI
import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—â–µ–π –±–∞–∑–µ)
try:
    if create_tables():
        print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–±—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

app = FastAPI()

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"message": "Okdesk Bot Webhook Server is running", "status": "ok"}

@app.get(config.WEBHOOK_PATH)
async def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook endpoint"""
    return {"message": "Webhook endpoint is ready", "path": config.WEBHOOK_PATH}

class WebhookData(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞"""
    event: str
    data: Dict[str, Any]
    timestamp: Optional[int] = None

@app.post(config.WEBHOOK_PATH)
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Okdesk"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        print(f"üé£ –ü–æ–ª—É—á–µ–Ω webhook (raw): {body.decode('utf-8')}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = json.loads(body.decode('utf-8'))
            print(f"üìÑ Parsed JSON: {json.dumps(data, indent=2, ensure_ascii=False)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"message": "Webhook received", "error": "Invalid JSON"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
        if config.WEBHOOK_SECRET and config.WEBHOOK_SECRET.strip():
            signature = request.headers.get("X-Okdesk-Signature")
            if not verify_webhook_signature(body, signature):
                raise HTTPException(status_code=403, detail="Invalid signature")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event = data.get("event", "unknown")
        if isinstance(event, dict):
            event = event.get("event_type", "unknown")
        
        event_data = data.get("data", data)
        
        print(f"üìä Event: {event}")
        
        try:
            if event == "issue.created" or event == "new_ticket":
                await handle_issue_created(data.get("issue", event_data))
            elif event == "issue.updated":
                await handle_issue_updated(event_data)
            elif event == "comment.created" or event == "new_comment":
                await handle_comment_created(data)
            elif event == "issue.status_changed":
                await handle_status_changed(event_data)
            else:
                print(f"‚ùì Unknown event: {event}")
                # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
                if "comment" in str(data).lower() or "content" in data:
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
                    await handle_comment_created(data)
            
            return {"status": "success", "event": event}
        
        except Exception as e:
            print(f"‚ùå Webhook processing error: {e}")
            return {"status": "error", "message": str(e)}
    
    except Exception as e:
        print(f"‚ùå Request processing error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def handle_issue_created(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    issue_id = data.get("id")
    if not issue_id:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞ –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if issue:
        print(f"Issue {issue_id} already exists in database")
        return
    
    print(f"New issue created in Okdesk: {issue_id}")

async def handle_issue_updated(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {json.dumps(data, indent=2, ensure_ascii=False)}")

    issue_id = data.get("id")
    if not issue_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    new_status = data.get("status")
    if new_status and new_status != issue.status:
        print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –∏–∑–º–µ–Ω–∏–ª—Å—è: {issue.status} -> {new_status}")

        updated_issue = IssueService.update_issue_status(issue.id, new_status)
        if updated_issue:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
            await notify_user_status_change(updated_issue, new_status, issue.status)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –≤ –ë–î")
    else:
        print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")

    print(f"Issue {issue_id} updated")

async def handle_comment_created(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    print(f"üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {json.dumps(data, indent=2, ensure_ascii=False)}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook
    event_data = data.get("event", data)
    issue_data = data.get("issue", {})
    comment_data = event_data.get("comment", {})
    author_data = event_data.get("author", {})
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    issue_id = issue_data.get("id")
    comment_id = comment_data.get("id")
    content = comment_data.get("content")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
    author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    if author_data:
        first_name = author_data.get("first_name", "")
        last_name = author_data.get("last_name", "")
        author_name = f"{first_name} {last_name}".strip()
    
    print(f"üìù –ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    print(f"   üé´ –ó–∞—è–≤–∫–∞ ID: {issue_id}")
    print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment_id}")
    print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}")
    print(f"   üë§ –ê–≤—Ç–æ—Ä: {author_name}")
    
    if not all([issue_id, comment_id, content]):
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏: {config.DATABASE_URL}")
        all_issues = IssueService.get_all_issues()
        print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –ë–î: {len(all_issues)}")
        if all_issues:
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î:")
            for i in all_issues[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"   - ID: {i.okdesk_issue_id}, Title: {i.title}")
        
        return
    
    print(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {issue.title}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à –ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    existing_comments = CommentService.get_issue_comments(issue.id)
    for comment in existing_comments:
        if comment.okdesk_comment_id == comment_id:
            print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î
    CommentService.add_comment(
        issue_id=issue.id,
        telegram_user_id=issue.telegram_user_id,
        content=content,
        okdesk_comment_id=comment_id,
        is_from_okdesk=True
    )
    
    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∑–∞—è–≤–∫–∏
    # –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
    author_contact_id = author_data.get("id")
    issue_creator = UserService.get_user_by_telegram_id(issue.telegram_user_id)
    
    if issue_creator and issue_creator.okdesk_contact_id and author_contact_id:
        if issue_creator.okdesk_contact_id == author_contact_id:
            print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∑–∞—è–≤–∫–∏ ({author_name}), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            print(f"New comment from issue creator: {comment_id}")
            return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await notify_user_new_comment(issue, content, author_data)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
    
    print(f"New comment from Okdesk: {comment_id}")

async def handle_status_changed(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    issue_id = (
        data.get("issue_id") or
        data.get("id") or
        data.get("issue", {}).get("id")
    )

    new_status = (
        data.get("new_status") or
        data.get("status") or
        data.get("issue", {}).get("status")
    )

    old_status = (
        data.get("old_status") or
        data.get("previous_status") or
        data.get("old_status")
    )

    if not issue_id or not new_status:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: issue_id={issue_id}, new_status={new_status}")
        return

    print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {issue_id}: {old_status or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} -> {new_status}")

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    updated_issue = IssueService.update_issue_status(issue.id, new_status)
    if updated_issue:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: {new_status}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_status_change(updated_issue, new_status, old_status)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –≤ –ë–î")

    print(f"Status changed for issue {issue_id}: {old_status or 'unknown'} -> {new_status}")

async def notify_user_status_change(issue, new_status: str, old_status: str = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞"""
    from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from database.crud import IssueService
    
    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
    
    message = (
        f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{issue.issue_number} –∏–∑–º–µ–Ω–∏–ª—Å—è\n\n"
        f"üìù {issue.title}\n"
        f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}"
    )
    
    if old_status:
        old_status_text = config.ISSUE_STATUS_MESSAGES.get(old_status, old_status)
        message += f"\n‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {old_status_text}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "resolved" (—Ä–µ—à–µ–Ω–∞), –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    if new_status == "resolved":
        message += "\n\n‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:"
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–æ", callback_data=f"rate_5_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–æ", callback_data=f"rate_4_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data=f"rate_3_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê –ü–ª–æ—Ö–æ", callback_data=f"rate_2_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê –£–∂–∞—Å–Ω–æ", callback_data=f"rate_1_{issue.id}")]
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=issue.okdesk_url),
        InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=issue.okdesk_url)
    ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
    message_updated = False
    if issue.telegram_message_id:
        try:
            await bot.edit_message_text(
                chat_id=issue.telegram_user_id,
                message_id=issue.telegram_message_id,
                text=message,
                reply_markup=keyboard
            )
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ {issue.id} (message_id={issue.telegram_message_id})")
            message_updated = True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if not message_updated:
        try:
            sent_message = await bot.send_message(
                chat_id=issue.telegram_user_id,
                text=message,
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if sent_message and sent_message.message_id:
                IssueService.update_issue_message_id(issue.id, sent_message.message_id)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω message_id={sent_message.message_id} –¥–ª—è –∑–∞—è–≤–∫–∏ {issue.id}")
            else:
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {issue.id}")
        except Exception as e:
            print(f"‚ùå Failed to send status notification: {e}")

async def notify_user_new_comment(issue, content: str, author: Dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    author_name = author.get("name", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
    
    message = (
        f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
        f"üìù {issue.title}\n"
        f"üë§ –û—Ç: {author_name}\n"
        f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {content[:200]}{'...' if len(content) > 200 else ''}\n\n"
        f"üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—Ä—Ç–∞–ª–µ: {issue.okdesk_url}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"add_comment_{issue.issue_number}")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues"),
         InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issue.telegram_user_id} –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}")
    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
    print(f"üîò –ö–Ω–æ–ø–∫–∏: {[btn.text for row in keyboard.inline_keyboard for btn in row]}")
    
    try:
        await bot.send_message(
            chat_id=issue.telegram_user_id,
            text=message,
            reply_markup=keyboard
        )
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issue.telegram_user_id}")
    except Exception as e:
        print(f"‚ùå Failed to send comment notification: {e}")
        import traceback
        traceback.print_exc()

def verify_webhook_signature(payload: bytes, signature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞"""
    if not signature or not config.WEBHOOK_SECRET or not config.WEBHOOK_SECRET.strip():
        return False
    
    expected_signature = hmac.new(
        config.WEBHOOK_SECRET.encode(),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(signature, expected_signature)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"üîç WEBHOOK STARTUP: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_URL}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook
    if config.WEBHOOK_SECRET and config.WEBHOOK_SECRET.strip():
        print("üîê Webhook –∑–∞—â–∏—â–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º")
    else:
        print("‚ö†Ô∏è  Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {config.HOST}:{config.PORT}")
    uvicorn.run(app, host=config.HOST, port=config.PORT)
