from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional
import json
import hmac
import hashlib
from database.crud import IssueService, CommentService, UserService
from models.database import create_tables, Issue
from services.okdesk_api import OkdeskAPI
import config
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—â–µ–π –±–∞–∑–µ)
try:
    if create_tables():
        print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–±—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

app = FastAPI()

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"message": "Okdesk Bot Webhook Server is running", "status": "ok"}

@app.get(config.WEBHOOK_PATH)
async def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook endpoint"""
    return {"message": "Webhook endpoint is ready", "path": config.WEBHOOK_PATH}

class WebhookData(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞"""
    event: str
    data: Dict[str, Any]
    timestamp: Optional[int] = None

@app.post(config.WEBHOOK_PATH)
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Okdesk"""
    
    print(f"üé£ Webhook received at {config.WEBHOOK_PATH}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        print(f"üé£ –ü–æ–ª—É—á–µ–Ω webhook (raw): {body.decode('utf-8')}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = json.loads(body.decode('utf-8'))
            print(f"üìÑ Parsed JSON: {json.dumps(data, indent=2, ensure_ascii=False)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"message": "Webhook received", "error": "Invalid JSON"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
        if config.WEBHOOK_SECRET and config.WEBHOOK_SECRET.strip():
            signature = request.headers.get("X-Okdesk-Signature")
            if not verify_webhook_signature(body, signature):
                raise HTTPException(status_code=403, detail="Invalid signature")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event = data.get("event", "unknown")
        if isinstance(event, dict):
            event = event.get("event_type", "unknown")
        
        event_data = data.get("data", data)
        
        print(f"üìä Event: {event}")
        print(f"üìä All data keys: {list(data.keys())}")
        print(f"üìä Event data keys: {list(event_data.keys())}")
        
        try:
            if event == "issue.created" or event == "new_ticket":
                print(f"üé´ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
                await handle_issue_created(data.get("issue", event_data))
            elif event == "issue.updated":
                print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
                await handle_issue_updated(data.get("issue", event_data))
            elif event == "issue.status_changed":
                print(f"ÔøΩ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏")
                await handle_status_changed(data.get("issue", event_data))
            elif event == "comment.created" or event == "new_comment":
                print(f"ÔøΩ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                await handle_comment_created(data)
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
                print(f"üìÑ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {json.dumps(event_data, indent=2, ensure_ascii=False)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                if "issue" in data and "status" in str(data.get("issue", {})):
                    print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
                    await handle_status_changed(data.get("issue", event_data))
                elif "comment" in str(data).lower() or "content" in str(data).lower():
                    print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
                    await handle_comment_created(data)
                elif "status" in str(data).lower() or "state" in str(data).lower():
                    print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
                    await handle_status_changed(event_data)
            
            return {"status": "success", "event": event}
        
        except Exception as e:
            print(f"‚ùå Webhook processing error: {e}")
            return {"status": "error", "message": str(e)}
    
    except Exception as e:
        print(f"‚ùå Request processing error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def handle_issue_created(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    issue_id = data.get("id")
    if not issue_id:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞ –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if issue:
        print(f"Issue {issue_id} already exists in database")
        return
    
    print(f"New issue created in Okdesk: {issue_id}")

async def handle_issue_updated(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {json.dumps(data, indent=2, ensure_ascii=False)}")

    issue_id = data.get("id")
    if not issue_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    new_status = data.get("status")
    if isinstance(new_status, dict):
        new_status = new_status.get("code", new_status)
    
    print(f"üîç –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ webhook: {new_status} (—Ç–∏–ø: {type(new_status)})")
    print(f"üîç –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ë–î: {issue.status}")
    
    if new_status and new_status != issue.status:
        print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –∏–∑–º–µ–Ω–∏–ª—Å—è: {issue.status} -> {new_status}")

        updated_issue = IssueService.update_issue_status(issue.id, new_status)
        if updated_issue:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
            await notify_user_status_change(updated_issue, new_status, issue.status)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –≤ –ë–î")
    else:
        print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")

    print(f"Issue {issue_id} updated")

async def handle_comment_created(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    try:
        print(f"üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {json.dumps(data, indent=2, ensure_ascii=False)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook
        event_data = data.get("event", data)
        issue_data = data.get("issue", {})
        comment_data = event_data.get("comment", {})
        author_data = event_data.get("author", {})
        
        print(f"üîç event_data keys: {list(event_data.keys())}")
        print(f"üîç issue_data keys: {list(issue_data.keys())}")
        print(f"üîç comment_data keys: {list(comment_data.keys())}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        issue_id = issue_data.get("id")
        comment_id = comment_data.get("id")
        content = comment_data.get("content")
        is_public = comment_data.get("is_public", False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–ª—è public
        if isinstance(is_public, str):
            is_public = is_public.lower() in ('true', '1', 'yes', 'on')
        elif is_public is None:
            is_public = False
        
        print(f"üîç –ü–æ–ª—è comment_data: {list(comment_data.keys())}")
        print(f"üîç –ó–Ω–∞—á–µ–Ω–∏–µ public (raw): {comment_data.get('is_public', 'NOT_SET')}")
        print(f"üîç –ó–Ω–∞—á–µ–Ω–∏–µ public (processed): {is_public}")
        print(f"üîç –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è public: {type(comment_data.get('is_public'))}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
        author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        if author_data:
            first_name = author_data.get("first_name", "")
            last_name = author_data.get("last_name", "")
            author_name = f"{first_name} {last_name}".strip()
        
        print(f"üìù –ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        print(f"   üé´ –ó–∞—è–≤–∫–∞ ID: {issue_id}")
        print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment_id}")
        print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–æ—á–∏—â–µ–Ω–Ω–æ–µ): {clean_html_content(content)[:100]}{'...' if len(clean_html_content(content)) > 100 else ''}")
        print(f"   üë§ –ê–≤—Ç–æ—Ä: {author_name}")
        print(f"   üåê –ü—É–±–ª–∏—á–Ω—ã–π: {is_public}")
        
        if not all([issue_id, comment_id, content]):
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É–±–ª–∏—á–Ω—ã–º
        if not is_public:
            print(f"üîí –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º (–Ω–µ –ø—É–±–ª–∏—á–Ω—ã–º), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
        issue = IssueService.get_issue_by_okdesk_id(issue_id)
        if not issue:
            print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"üîç –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏: {config.DATABASE_URL}")
            all_issues = IssueService.get_all_issues()
            print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –ë–î: {len(all_issues)}")
            if all_issues:
                print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î:")
                for i in all_issues[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    print(f"   - ID: {i.okdesk_issue_id}, Title: {i.title}")
            
            return
        
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {issue.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à –ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        existing_comments = CommentService.get_issue_comments(issue.id)
        for comment in existing_comments:
            if comment.okdesk_comment_id == comment_id:
                print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î
        CommentService.add_comment(
            issue_id=issue.id,
            telegram_user_id=issue.telegram_user_id,
            content=content,
            okdesk_comment_id=comment_id,
            is_from_okdesk=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        current_status = issue_data.get("status")
        if isinstance(current_status, dict):
            current_status = current_status.get("code", current_status)
        
        if current_status and current_status != issue.status:
            print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {issue.status} -> {current_status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            updated_issue = IssueService.update_issue_status(issue.id, current_status)
            if updated_issue:
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                await notify_user_status_change(updated_issue, current_status, issue.status)
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –≤ –ë–î —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
        author_contact_id = author_data.get("id")
        issue_creator = UserService.get_user_by_telegram_id(issue.telegram_user_id)
        
        if issue_creator and issue_creator.okdesk_contact_id and author_contact_id:
            if issue_creator.okdesk_contact_id == author_contact_id:
                print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∑–∞—è–≤–∫–∏ ({author_name}), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                print(f"New comment from issue creator: {comment_id}")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        should_notify_comment = True
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if current_status and current_status != issue.status:
            new_status_is_completion = current_status.lower() in config.RATING_REQUEST_STATUSES or any(s in current_status.lower() for s in config.RATING_REQUEST_STATUSES)
            if new_status_is_completion:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞—è–≤–∫–∏
                assignee_data = issue_data.get("assignee", {})
                assignee_employee = assignee_data.get("employee", {})
                assignee_id = assignee_employee.get("id")
                
                if assignee_id and author_contact_id == assignee_id:
                    print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ({author_name}), –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                    should_notify_comment = False
        
        if should_notify_comment:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            await notify_user_new_comment(issue, content, author_data)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        else:
            print(f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)")
        
        print(f"New comment from Okdesk: {comment_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        import traceback
        traceback.print_exc()

async def handle_status_changed(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    issue_id = (
        data.get("issue_id") or
        data.get("id") or
        data.get("issue", {}).get("id")
    )

    new_status_raw = (
        data.get("new_status") or
        data.get("status") or
        data.get("issue", {}).get("status") or
        data.get("status_id") or
        data.get("state")
    )

    old_status_raw = (
        data.get("old_status") or
        data.get("previous_status") or
        data.get("old_status") or
        data.get("previous_state")
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å –ø–æ–ª–µ–º 'code' –∏–ª–∏ 'name')
    new_status = new_status_raw
    if isinstance(new_status_raw, dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –ø–æ–ª—è: code –∏ name
        new_status = (
            new_status_raw.get("code") or
            new_status_raw.get("name") or
            str(new_status_raw)
        )
    
    old_status = old_status_raw  
    if isinstance(old_status_raw, dict):
        old_status = (
            old_status_raw.get("code") or
            old_status_raw.get("name") or
            str(old_status_raw)
        )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    normalized_new_status = config.OKDESK_STATUS_MAPPING.get(new_status, new_status)
    normalized_old_status = config.OKDESK_STATUS_MAPPING.get(old_status, old_status) if old_status else None

    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ: issue_id={issue_id}")
    print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status_raw} -> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {normalized_new_status}")
    print(f"üîç –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {old_status_raw} -> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {normalized_old_status}")
    print(f"üîç OKDESK_STATUS_MAPPING: {config.OKDESK_STATUS_MAPPING}")
    print(f"üîç RATING_REQUEST_STATUSES: {config.RATING_REQUEST_STATUSES}")

    if not issue_id or not new_status:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: issue_id={issue_id}, new_status={new_status}")
        return

    print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {issue_id}: {normalized_old_status or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} -> {normalized_new_status}")

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    status_actually_changed = normalized_new_status != issue.status
    new_status_is_completion = normalized_new_status.lower() in config.RATING_REQUEST_STATUSES or any(s in normalized_new_status.lower() for s in config.RATING_REQUEST_STATUSES)

    print(f"üîç status_actually_changed: {status_actually_changed}")
    print(f"üîç new_status_is_completion: {new_status_is_completion}")
    print(f"üîç normalized_new_status: '{normalized_new_status}'")

    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω "–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"
    # (–º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ webhook –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—ã –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
    updated_issue = IssueService.update_issue_status(issue.id, normalized_new_status)
    if updated_issue:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: {issue.status} -> {normalized_new_status}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –µ—Å–ª–∏:
        # 1. –°—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ò–õ–ò
        # 2. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∞—é—â–∏–º (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–∫–∏ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ notify_user_status_change)
        should_notify = status_actually_changed or new_status_is_completion
        
        if should_notify:
            await notify_user_status_change(updated_issue, normalized_new_status, normalized_old_status)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∞—é—â–∏–º")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {issue_id} –≤ –ë–î")

    print(f"Status changed for issue {issue_id}: {normalized_old_status or 'unknown'} -> {normalized_new_status}")

async def notify_user_status_change(issue, new_status: str, old_status: str = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞"""
    from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from database.crud import IssueService
    
    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
    
    message = (
        f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{issue.issue_number} –∏–∑–º–µ–Ω–∏–ª—Å—è\n\n"
        f"üìù {issue.title}\n\n"
        f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É
    needs_rating = any(status in new_status.lower() for status in config.RATING_REQUEST_STATUSES) or new_status.lower() in config.RATING_REQUEST_STATUSES
    
    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ü–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    if needs_rating and (issue.rating is not None or issue.rating_requested):
        if issue.rating is not None:
            print(f"‚≠ê –û–¶–ï–ù–ö–ê –ü–†–û–ü–£–©–ï–ù–ê: –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ü–µ–Ω–µ–Ω–∞ ({issue.rating}/5)")
        else:
            print(f"‚≠ê –û–¶–ï–ù–ö–ê –ü–†–û–ü–£–©–ï–ù–ê: –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        needs_rating = False
    
    print(f"‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{new_status}':")
    print(f"   üìã RATING_REQUEST_STATUSES: {config.RATING_REQUEST_STATUSES}")
    print(f"   üîç new_status.lower(): '{new_status.lower()}'")
    print(f"   ‚≠ê issue.rating: {issue.rating}")
    print(f"   ‚úÖ needs_rating: {needs_rating}")
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å, —Ç—Ä–µ–±—É—é—â–∏–π –æ—Ü–µ–Ω–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    if needs_rating:
        print(f"‚≠ê –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –û–¶–ï–ù–ö–ò –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{new_status}'")
        message += config.RATING_REQUEST_TEXT
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–æ (5)", callback_data=f"rate_5_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–æ (4)", callback_data=f"rate_4_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê –ù–æ—Ä–º–∞–ª—å–Ω–æ (3)", callback_data=f"rate_3_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê‚≠ê –ü–ª–æ—Ö–æ (2)", callback_data=f"rate_2_{issue.id}")],
            [InlineKeyboardButton(text="‚≠ê –£–∂–∞—Å–Ω–æ (1)", callback_data=f"rate_1_{issue.id}")]
        ])
    else:
        print(f"‚≠ê –û–¶–ï–ù–ö–ê –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{new_status}'")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=issue.okdesk_url),
        InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=issue.okdesk_url)
    ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
    message_updated = False
    if issue.telegram_message_id:
        try:
            await bot.edit_message_text(
                chat_id=issue.telegram_user_id,
                message_id=issue.telegram_message_id,
                text=message,
                reply_markup=keyboard
            )
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ {issue.id} (message_id={issue.telegram_message_id})")
            message_updated = True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    sent_message = None
    if not message_updated:
        try:
            sent_message = await bot.send_message(
                chat_id=issue.telegram_user_id,
                text=message,
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if sent_message and sent_message.message_id:
                IssueService.update_issue_message_id(issue.id, sent_message.message_id)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω message_id={sent_message.message_id} –¥–ª—è –∑–∞—è–≤–∫–∏ {issue.id}")
            else:
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {issue.id}")
        except Exception as e:
            print(f"‚ùå Failed to send status notification: {e}")
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    if needs_rating and (message_updated or sent_message):
        try:
            from models.database import SessionLocal
            db = SessionLocal()
            db_issue = db.query(Issue).filter(Issue.id == issue.id).first()
            if db_issue:
                db_issue.rating_requested = True
                db.commit()
                print(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {issue.id}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ rating_requested: {e}")
        finally:
            db.close()

async def notify_user_new_comment(issue, content: str, author: Dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
    author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    if author:
        first_name = author.get("first_name", "")
        last_name = author.get("last_name", "")
        full_name = f"{first_name} {last_name}".strip()
        if full_name:
            author_name = full_name
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç first_name/last_name, –ø—Ä–æ–±—É–µ–º –ø–æ–ª–µ name
            author_name = author.get("name", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
    
    # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    clean_content = clean_html_content(content)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è Telegram
    max_comment_length = 150
    truncated_content = clean_content[:max_comment_length]
    if len(clean_content) > max_comment_length:
        truncated_content += "..."
    
    message = (
        f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
        f"üìù {issue.title}\n"
        f"üë§ –û—Ç: {author_name}\n"
        f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n"
        f"‚îå‚îÄ {'‚îÄ' * min(len(truncated_content), 30)} ‚îÄ‚îê\n"
        f"‚îÇ {truncated_content} ‚îÇ\n"
        f"‚îî‚îÄ {'‚îÄ' * min(len(truncated_content), 30)} ‚îÄ‚îò"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–æ—Ä—Ç–∞–ª–µ", url=issue.okdesk_url)],
        [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"add_comment_{issue.issue_number}")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_issues"),
         InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_issue")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issue.telegram_user_id} –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}")
    print(f"üìù –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {truncated_content[:50]}...")
    print(f"üîò –ö–Ω–æ–ø–∫–∏: {[btn.text for row in keyboard.inline_keyboard for btn in row]}")
    
    try:
        sent_message = await bot.send_message(
            chat_id=issue.telegram_user_id,
            text=message,
            reply_markup=keyboard
        )
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issue.telegram_user_id}")
        print(f"üì® ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}")
        print(f"üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {sent_message.reply_markup is not None}")
        if sent_message.reply_markup:
            print(f"üîò –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: {len(sent_message.reply_markup.inline_keyboard)}")
    except Exception as e:
        print(f"‚ùå Failed to send comment notification: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        try:
            simple_message = (
                f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
                f"üìù {issue.title}\n"
                f"üë§ –û—Ç: {author_name}\n"
                f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {truncated_content}\n\n"
                f"üîó {issue.okdesk_url}"
            )
            
            await bot.send_message(
                chat_id=issue.telegram_user_id,
                text=simple_message
            )
            print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {issue.telegram_user_id}")
        except Exception as e2:
            print(f"‚ùå –î–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e2}")
            import traceback
            traceback.print_exc()

def verify_webhook_signature(payload: bytes, signature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞"""
    if not signature or not config.WEBHOOK_SECRET or not config.WEBHOOK_SECRET.strip():
        return False
    
    expected_signature = hmac.new(
        config.WEBHOOK_SECRET.encode(),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(signature, expected_signature)

def clean_html_content(content: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if not content:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ—á–Ω—ã–µ —Ç–µ–≥–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤
    content = re.sub(r'</(p|div|br|h[1-6]|li|ul|ol|blockquote)[^>]*>', ' ', content, flags=re.IGNORECASE)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', content)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    clean_text = re.sub(r'\n\s*\n', '\n', clean_text)
    clean_text = re.sub(r'\s+', ' ', clean_text)
    
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    clean_text = clean_text.replace('\r', '').replace('\t', ' ')
    
    return clean_text.strip()

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"üîç WEBHOOK STARTUP: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_URL}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook
    if config.WEBHOOK_SECRET and config.WEBHOOK_SECRET.strip():
        print("üîê Webhook –∑–∞—â–∏—â–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º")
    else:
        print("‚ö†Ô∏è  Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {config.HOST}:{config.PORT}")
    uvicorn.run(app, host=config.HOST, port=config.PORT)
