from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional
import json
import hmac
import hashlib
from database.crud import IssueService, CommentService, UserService
from services.okdesk_api import OkdeskAPI
import config

app = FastAPI()

class WebhookData(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞"""
    event: str
    data: Dict[str, Any]
    timestamp: Optional[int] = None

@app.post(config.WEBHOOK_PATH)
async def webhook_handler(request: Request, webhook_data: WebhookData):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Okdesk"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
    if config.WEBHOOK_SECRET and config.WEBHOOK_SECRET.strip():
        signature = request.headers.get("X-Okdesk-Signature")
        if not verify_webhook_signature(await request.body(), signature):
            raise HTTPException(status_code=403, detail="Invalid signature")
    
    event = webhook_data.event
    data = webhook_data.data
    
    try:
        if event == "issue.created":
            await handle_issue_created(data)
        elif event == "issue.updated":
            await handle_issue_updated(data)
        elif event == "comment.created":
            await handle_comment_created(data)
        elif event == "issue.status_changed":
            await handle_status_changed(data)
        else:
            print(f"Unknown event: {event}")
        
        return {"status": "success"}
    
    except Exception as e:
        print(f"Webhook processing error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def handle_issue_created(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    issue_id = data.get("id")
    if not issue_id:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞ –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if issue:
        print(f"Issue {issue_id} already exists in database")
        return
    
    print(f"New issue created in Okdesk: {issue_id}")

async def handle_issue_updated(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    issue_id = data.get("id")
    if not issue_id:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"Issue {issue_id} not found in database")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    new_status = data.get("status")
    if new_status and new_status != issue.status:
        IssueService.update_issue_status(issue.id, new_status)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        await notify_user_status_change(issue, new_status)
    
    print(f"Issue {issue_id} updated")

async def handle_comment_created(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    print(f"üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {json.dumps(data, indent=2, ensure_ascii=False)}")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    # –í–∞—Ä–∏–∞–Ω—Ç 1: issue –∏ comment –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    issue_data = data.get("issue", {})
    comment_data = data.get("comment", {})
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ
    if not issue_data:
        issue_data = data.get("issue", data)
    if not comment_data:
        comment_data = data
    
    issue_id = issue_data.get("id")
    comment_id = comment_data.get("id")
    content = comment_data.get("content")
    author = comment_data.get("author", {})
    
    print(f"üìù –ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    print(f"   üé´ –ó–∞—è–≤–∫–∞ ID: {issue_id}")
    print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment_id}")
    print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}")
    print(f"   üë§ –ê–≤—Ç–æ—Ä: {author.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
    
    if not all([issue_id, comment_id, content]):
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ {issue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {issue.title}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à –ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    existing_comment = CommentService.get_issue_comments(issue.id)
    for comment in existing_comment:
        if comment.okdesk_comment_id == comment_id:
            print(f"‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î
    CommentService.add_comment(
        issue_id=issue.id,
        telegram_user_id=issue.telegram_user_id,
        content=content,
        okdesk_comment_id=comment_id,
        is_from_okdesk=True
    )
    
    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await notify_user_new_comment(issue, content, author)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
    
    print(f"New comment from Okdesk: {comment_id}")

async def handle_status_changed(data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    issue_id = data.get("issue_id")
    new_status = data.get("new_status")
    old_status = data.get("old_status")
    
    if not all([issue_id, new_status]):
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ –Ω–∞—à–µ–π –ë–î
    issue = IssueService.get_issue_by_okdesk_id(issue_id)
    if not issue:
        print(f"Issue {issue_id} not found in database")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    IssueService.update_issue_status(issue.id, new_status)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await notify_user_status_change(issue, new_status, old_status)
    
    print(f"Status changed for issue {issue_id}: {old_status} -> {new_status}")

async def notify_user_status_change(issue, new_status: str, old_status: str = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞"""
    from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    
    status_text = config.ISSUE_STATUS_MESSAGES.get(new_status, new_status)
    
    message = (
        f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{issue.issue_number} –∏–∑–º–µ–Ω–∏–ª—Å—è\n\n"
        f"üìù {issue.title}\n"
        f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}"
    )
    
    if old_status:
        old_status_text = config.ISSUE_STATUS_MESSAGES.get(old_status, old_status)
        message += f"\n‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {old_status_text}"
    
    try:
        await bot.send_message(
            chat_id=issue.telegram_user_id,
            text=message
        )
    except Exception as e:
        print(f"Failed to send status notification: {e}")

async def notify_user_new_comment(issue, content: str, author: Dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    
    author_name = author.get("name", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
    
    message = (
        f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{issue.issue_number}\n\n"
        f"üìù {issue.title}\n"
        f"üë§ –û—Ç: {author_name}\n"
        f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {content[:200]}{'...' if len(content) > 200 else ''}\n\n"
        f"üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É: {issue.okdesk_url}"
    )
    
    try:
        await bot.send_message(
            chat_id=issue.telegram_user_id,
            text=message
        )
    except Exception as e:
        print(f"Failed to send comment notification: {e}")

def verify_webhook_signature(payload: bytes, signature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞"""
    if not signature or not config.WEBHOOK_SECRET or not config.WEBHOOK_SECRET.strip():
        return False
    
    expected_signature = hmac.new(
        config.WEBHOOK_SECRET.encode(),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(signature, expected_signature)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ webhook
    if config.WEBHOOK_SECRET and config.WEBHOOK_SECRET.strip():
        print("üîê Webhook –∑–∞—â–∏—â–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º")
    else:
        print("‚ö†Ô∏è  Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {config.HOST}:{config.PORT}")
    uvicorn.run(app, host=config.HOST, port=config.PORT)
